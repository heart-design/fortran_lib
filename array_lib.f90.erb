<%-
  require 'fort'

  INTEGERS = ::Fort::Type::Integer.multi_provide(dim: 0)
  REAL1S = ::Fort::Type::Real.multi_provide(dim: 1)
  COMPLEX1S = ::Fort::Type::Complex.multi_provide(dim: 1)
  ARRAYS =
  COMPLEX1S +
  ::Fort::Type::Logical.multi_provide(dim: 1) +
  ::Fort::Type::Integer.multi_provide(dim: 1) +
  REAL1S

  def kind_max(t1, t2)
     [kind(t1), kind(t2)].max
  end

  def kind(t)
    t.kind.to_s.sub(/\AREAL/, '').to_i
 end
-%>

# include "fortran_lib.h"
module array_lib
   USE_FORTRAN_LIB_H
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   use, intrinsic:: iso_fortran_env, only: INPUT_UNIT, OUTPUT_UNIT, ERROR_UNIT

   implicit none

   private
   public:: mul_diag
   public:: get
   public:: eye
   public:: l2_norm
   public:: iota

   <%- (REAL1S + COMPLEX1S).product((REAL1S + COMPLEX1S)).each{|t1, t2| -%>
      interface mul_diag
         module procedure mul_diag_Ad<%= t1 %><%= t2 %>
         module procedure mul_diag_dA<%= t1 %><%= t2 %>
      end interface mul_diag
   <%- } -%>

   <%- ARRAYS.product(INTEGERS).each{|t, ti| -%>
      interface get
         module procedure get<%= t %><%= ti %>
      end interface get
   <%- } -%>

   <%- INTEGERS.each{|t| -%>
      interface eye
         module procedure eye_mn<%= t %>
         module procedure eye_n<%= t %>
      end interface eye
   <%- } -%>

   <%- REAL1S.each{|t| -%>
      interface l2_norm
         module procedure l2_norm<%= t %>
      end interface l2_norm
   <%- } -%>

   <%- INTEGERS.each{|t1| -%>
      interface iota
         module procedure iota_1<%= t1.id %>
      end interface iota

      interface get_iota_size
         module procedure get_iota_size_1<%= t1.id %>
      end interface get_iota_size

      <%- INTEGERS.each{|t2| -%>
         interface iota
            module procedure iota_2<%= t1.id %><%= t2.id %>
         end interface iota

         interface get_iota_size
            module procedure get_iota_size_2<%= t1.id %><%= t2.id %>
         end interface get_iota_size

         <%- INTEGERS.each{|t3| -%>
            interface iota
               module procedure iota_3<%= t1.id %><%= t2.id %><%= t3.id %>
            end interface iota

            interface get_iota_size
               module procedure get_iota_size_3<%= t1.id %><%= t2.id %><%= t3.id %>
            end interface get_iota_size
         <%- } -%>
      <%- } -%>
   <%- } -%>

contains

   <%- (REAL1S + COMPLEX1S).product((REAL1S + COMPLEX1S)).each{|t1, t2| -%>
      <%-
         t_ret = (t1.type == :Complex or t2.type == :Complex) ? :Complex : :Real
         k_ret = "REAL#{kind_max(t1, t2)}".to_sym
      -%>
      function mul_diag_Ad<%= t1 %><%= t2 %>(A, d) result(ret)
         Integer(kind=int64):: i
         <%= t1.declare %>, intent(in):: A(:, :)
         <%= t2.declare %>, intent(in):: d(size(A, 2, kind=kind(i)))
         <%= t_ret %>(kind=<%= k_ret %>):: ret(size(A, 1, kind=kind(i)), size(A, 2, kind=kind(i)))

         do i = 1, size(A, 2, kind=kind(i))
            ret(:, i) = A(:, i)*d(i)
         end do
      end function mul_diag_Ad<%= t1 %><%= t2 %>

      ! `d` is named `d_` to avoid ambiguity
      function mul_diag_dA<%= t1 %><%= t2 %>(d_, A) result(ret)
         Integer(kind=int64):: i
         <%= t1.declare %>, intent(in):: A(:, :)
         <%= t2.declare %>, intent(in):: d_(size(A, 1, kind=kind(i)))
         <%= t_ret %>(kind=<%= k_ret %>):: ret(size(A, 1, kind=kind(i)), size(A, 2, kind=kind(i)))

         do i = 1, size(A, 1, kind=kind(i))
            ret(i, :) = d_(i)*A(i, :)
         end do
      end function mul_diag_dA<%= t1 %><%= t2 %>
   <%- } -%>

   <%- ARRAYS.product(INTEGERS).each{|t, ti| -%>
      function get<%= t %><%= ti %>(xs, i) result(ret)
         <%= t.declare %>, intent(in):: xs
         <%= ti.declare %>, intent(in):: i
         <%= t.type %>(kind=<%= t.kind %>):: ret

         ret = xs(i)
      end function get<%= t %><%= ti %>
   <%- } -%>

   <%- INTEGERS.each{|t| -%>
      function eye_n<%= t %>(n) result(ret)
         <%= t.declare %>, intent(in):: n
         Integer(kind=INT8):: ret(n, n)

         ret = eye(n, n)
      end function eye_n<%= t %>

      function eye_mn<%= t %>(m, n) result(ret)
         <%= t.declare %>, intent(in):: m, n
         Integer(kind=INT8):: ret(m, n)
         Integer(kind=kind(m)):: i

         ret = 0
         do i = 1, min(m, n)
            ret(i, i) = 1
         end do
      end function eye_mn<%= t %>
   <%- } -%>

   <%- REAL1S.each{|t| -%>
      pure function l2_norm<%= t %>(xs) result(ret)
         <%= t.declare %>, intent(in):: xs
         Real(kind=kind(xs)):: ret

         ret = norm2(xs)**2
      end function l2_norm<%= t %>
   <%- } -%>

   <%- INTEGERS.each{|t1| -%>
      pure function iota_1<%= t1.id %>(end) result(ret)
         <%= t1.declare %>, intent(in):: end
         Integer(kind=kind(end)):: ret(get_iota_size(end))

         ret = iota(int(1, kind=INT8), end)
      end function iota_1<%= t1.id %>

      pure function get_iota_size_1<%= t1.id %>(end) result(ret)
         <%= t1.declare %>, intent(in):: end
         Integer(kind=kind(end)):: ret

         ret = get_iota_size(int(1, kind=INT8), end)
      end function get_iota_size_1<%= t1.id %>

      <%- INTEGERS.each{|t2| -%>
         pure function iota_2<%= t1.id %><%= t2.id %>(first, end) result(ret)
            <%= t1.declare %>, intent(in):: first
            <%= t2.declare %>, intent(in):: end
            Integer(kind=max(kind(first), kind(end))):: ret(get_iota_size(first, end))

            ret = iota(first, end, int(1, kind=INT8))
         end function iota_2<%= t1.id %><%= t2.id %>

         pure function get_iota_size_2<%= t1.id %><%= t2.id %>(first, end) result(ret)
            <%= t1.declare %>, intent(in):: first
            <%= t2.declare %>, intent(in):: end
            Integer(kind=max(kind(first), kind(end))):: ret

            ret = get_iota_size(first, end, int(int(1, kind=INT8), kind=INT8))
         end function get_iota_size_2<%= t1.id %><%= t2.id %>

         <%- INTEGERS.each{|t3| -%>
            pure function iota_3<%= t1.id %><%= t2.id %><%= t3.id %>(first, end, step) result(ret)
               <%= t1.declare %>, intent(in):: first
               <%= t2.declare %>, intent(in):: end
               <%= t3.declare %>, intent(in):: step
               Integer(kind=max(kind(first), kind(end), kind(step))):: ret(get_iota_size(first, end, step))
               Integer(kind=kind(ret)):: i

               ret = [(i, i = first, end, step)]
            end function iota_3<%= t1.id %><%= t2.id %><%= t3.id %>

            pure function get_iota_size_3<%= t1.id %><%= t2.id %><%= t3.id %>(first, end, step) result(ret)
               <%= t1.declare %>, intent(in):: first
               <%= t2.declare %>, intent(in):: end
               <%= t3.declare %>, intent(in):: step
               Integer(kind=max(kind(first), kind(end), kind(step))):: ret

               ret = max((end - first + step)/step, int(0, kind=kind(ret)))
            end function get_iota_size_3<%= t1.id %><%= t2.id %><%= t3.id %>
         <%- } -%>
      <%- } -%>
   <%- } -%>
end module array_lib
