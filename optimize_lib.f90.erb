<%-
   RKINDS = [32, 64]
   ORDERS = [0, 1]

   def s_or_d(k)
      if k == 64
         'd'
      elsif k == 32
         's'
      else
         raise "Unsupported kind: #{k}"
      end
   end
-%>
#include "fortran_lib.h"
module optimize_lib
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: INPUT_UNIT, OUTPUT_UNIT, ERROR_UNIT
   use, intrinsic:: iso_fortran_env, only: int8, int32, int64, real32, real64
   use, non_intrinsic:: constant_lib, only: get_infinity
   use, non_intrinsic:: array_lib, only: l2_norm

   implicit none

   private
   public:: nnls
   public:: update, init


   <%- RKINDS.each{|k| -%>
      type, public:: NewtonState<%= k %>
         Logical(kind=int8):: is_convex
         Logical(kind=int8):: is_within
         Integer(kind=int64):: dim
         Integer(kind=int64):: iter = -1
         Real(kind=real<%= k %>), allocatable:: x(:)
         Real(kind=real<%= k %>), allocatable:: x_prev(:)
         Real(kind=real<%= k %>):: f_prev
         Real(kind=real<%= k %>), allocatable:: g_prev(:)
      end type NewtonState<%= k %>

      type, public:: LineSearchState<%= k %>_0
         Logical(kind=int8):: is_convex
         Logical(kind=int8):: is_within
         Integer(kind=int64):: iter = -1
         Real(kind=real<%= k %>):: dx
         Real(kind=real<%= k %>):: x
         Real(kind=real<%= k %>):: xl
         Real(kind=real<%= k %>):: xr
         Real(kind=real<%= k %>):: fl
         Real(kind=real<%= k %>):: fr
      end type LineSearchState<%= k %>_0

      type, public:: LineSearchState<%= k %>_1
         Logical(kind=int8):: is_convex
         Logical(kind=int8):: is_within
         Integer(kind=int64):: iter = -1
         Real(kind=real<%= k %>):: dx
         Real(kind=real<%= k %>):: x
         Real(kind=real<%= k %>):: x_best
         Real(kind=real<%= k %>):: f_best
         Real(kind=real<%= k %>):: g_best
      end type LineSearchState<%= k %>_1
   <%- } -%>

   <%- RKINDS.each{|k| -%>
      interface update
         module procedure updateNewtonState<%= k %>
      end interface update

      interface update_
         module procedure update_NewtonState<%= k %>
      end interface update_

      interface restrict_step_size
         module procedure restrict_step_size<%= k %>
      end interface restrict_step_size

      interface init
         module procedure initNewtonState<%= k %>
      end interface init

      interface newton
         module procedure newton<%= k %>
      end interface newton

      <%- ORDERS.each{|order| -%>
         interface update
            module procedure updateLineSearchState<%= k %>_<%= order %>
         end interface update

         interface update_
            module procedure update_LineSearchState<%= k %>_<%= order %>
         end interface update_

         interface init
            module procedure initLineSearchState<%= k %>_<%= order %>
         end interface init

         interface line_search_interpolate
            module procedure line_search_interpolate<%= k %>_<%= order %>
         end interface line_search_interpolate
      <%- } -%>

      interface nnls
         module procedure nnls<%= k %>
      end interface nnls
   <%- } -%>

contains

   <%- RKINDS.each{|k| -%>
      <%- sd = s_or_d(k) -%>

      ! Newton

      subroutine updateNewtonState<%= k %>(s, f, g, H, uplo)
         ! call init(s, x0, l)
         ! do
         !    call update(s, f(s%x), g(s%x), H(s%x), 'u')
         ! end do
         Real(kind=real<%= k %>), parameter:: zero = 0
         Real(kind=real<%= k %>), parameter:: max_scale = 2
         type(NewtonState<%= k %>), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: f, g(s%dim), H(s%dim, s%dim)
         Character(len=1), intent(in):: uplo
         Real(kind=real<%= k %>):: l, l_new, lg, dx(s%dim), dx_new(s%dim)


         if(s%iter < 0)then
            RAISE('`NewtonState<%= k %>` should be `init`ialized before `update`d')
         end if
         s%iter = s%iter + 1

         dx(:) = s%x - s%x_prev
         DEBUG_ASSERT(dot_product(dx, s%g_prev) <= 0)
         if(f >= s%f_prev)then
            DEBUG_PRINT('BEGIN Line Search')
            l = norm2(dx)
            call line_search_interpolate(zero, s%f_prev, dot_product(dx, s%g_prev)/l, l, f, l_new, s%is_convex)

            ASSERT(s%is_convex)
            s%is_within = .true.
            s%x(:) = s%x_prev + l_new/l*dx
            DEBUG_PRINT('END Line Search')
            return
         end if

         call newton(uplo, g, H, dx_new, s%is_convex)
         if(s%is_convex)then
            DEBUG_PRINT('BEGIN Newton')
            call restrict_step_size(dx_new, dx, max_scale, s%is_within)
            call update_(s, dx_new, f, g)
            DEBUG_PRINT('END Newton')
            return
         end if


         lg = norm2(g)
         if(lg <= 0)then
            DEBUG_PRINT('BEGIN Saddle or Peak')
            call update_(s, dx/2, f, g)
            DEBUG_PRINT('END Saddle or Peak')
            return
         end if

         DEBUG_PRINT('BEGIN Steepest Descent')
         dx_new(:) = -max_scale*norm2(dx)/lg*g
         call restrict_step_size(dx_new, dx, max_scale, s%is_within)
         s%is_within = .false.
         call update_(s, dx_new, f, g)
         DEBUG_PRINT('END Steepest Descent')
      end subroutine updateNewtonState<%= k %>


      subroutine update_NewtonState<%= k %>(s, dx_new, f, g)
         type(NewtonState<%= k %>), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: dx_new(s%dim), f, g(s%dim)

         s%x_prev(:) = s%x
         s%x(:) = s%x_prev + dx_new
         s%f_prev = f
         s%g_prev(:) = g
      end subroutine update_NewtonState<%= k %>

      subroutine restrict_step_size<%= k %>(dx, dx_prev, max_scale, is_within)
         Real(kind=real<%= k %>), intent(inout):: dx(:)
         Real(kind=real<%= k %>), intent(in):: dx_prev(size(dx))
         Real(kind=real<%= k %>), intent(in):: max_scale
         Logical(kind=int8), intent(out):: is_within
         Real(kind=real<%= k %>):: l, l_prev, c

         is_within = .true.
         l_prev = norm2(dx_prev)
         l = norm2(dx)
         if(l > max_scale*l_prev)then
            dx(:) = max_scale*l_prev/l*dx
            is_within = .false.
         end if
         c = dot_product(dx_prev, dx)/l_prev
         if(c < -l_prev/2)then
            dx(:) = -l_prev/(2*c)*dx
            is_within = .false.
         end if
      end subroutine restrict_step_size<%= k %>


      subroutine initNewtonState<%= k %>(s, x0, l)
         type(NewtonState<%= k %>), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: x0(:) ! initial solution
         Real(kind=real<%= k %>), intent(in):: l ! initial step length

         ASSERT(l > 0)
         s%is_convex = .false.
         s%is_within = .false.
         s%iter = 0
         ENSURE_DEALLOCATED(s%x)
         ENSURE_DEALLOCATED(s%x_prev)
         ENSURE_DEALLOCATED(s%g_prev)
         s%dim = size(x0)
         allocate(s%x(s%dim))
         allocate(s%x_prev(s%dim))
         allocate(s%g_prev(s%dim))
         s%x(:) = x0
         s%x_prev(:) = s%x - sqrt(l/s%dim)
         s%f_prev = get_infinity()
         s%g_prev(:) = 0
      end subroutine initNewtonState<%= k %>


      subroutine newton<%= k %>(uplo, g, H, dx, is_convex)
         Integer(kind=int32), parameter:: nrhs = 1
         Character(len=1), intent(in):: uplo
         Real(kind=real<%= k %>), intent(in):: g(:), H(size(g), size(g))
         Real(kind=real<%= k %>), intent(out):: dx(size(g))
         Logical(kind=int8), intent(out):: is_convex
         Real(kind=real<%= k %>):: A(size(g), size(g))
         Integer(kind=kind(nrhs)):: n, info

         n = size(dx, kind=kind(n))
         ASSERT(n > 0)

         A = H
         dx = -g
         call <%= sd %>posv(uplo, n, nrhs, A, n, dx, n, info)
         ASSERT(info >= 0)
         is_convex = info == 0
      end subroutine newton<%= k %>


      ! derivative free

      subroutine updateLineSearchState<%= k %>_0(s, f)
         ! call init(s, dx)
         ! do
         !    call update(s, f(x0 + s%x))
         ! end do
         type(LineSearchState<%= k %>_0), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: f
         Real(kind=real<%= k %>):: x_new, x1, x2, x3, f1, f2, f3, step, xlim
         Real(kind=real<%= k %>), parameter:: enlarge = real(5, kind=kind(enlarge))/4

         if(s%iter < 0)then
            RAISE('`LineSearchState<%= k %>_0` should be `init`ialized before `update`d')
         end if
         s%iter = s%iter + 1
         if(s%iter == 1)then
            s%x = s%dx
            if(s%dx > 0)then
               s%fl = f
            else
               s%fr = f
            end if
            return
         else if(s%iter == 2)then
            if(s%dx > 0)then
               ASSERT(s%x > s%xl)
               s%xr = s%x
               s%fr = f
            else
               ASSERT(s%x < s%xr)
               s%xl = s%x
               s%fl = f
            end if
            step = enlarge*(s%xr - s%xl)
            if(s%fr < s%fl)then
               s%x = s%xr + step
            else
               s%x = s%xl - step
            end if
            return
         else
            ! converged case should be treated by caller
            ASSERT(s%x /= s%xl .and. s%x /= s%xr)
            if(s%x < s%xl)then
               x1 = s%x
               x2 = s%xl
               x3 = s%xr
               f1 = f
               f2 = s%fl
               f3 = s%fr
            else if(s%xr < s%x)then
               x1 = s%xl
               x2 = s%xr
               x3 = s%x
               f1 = s%fl
               f2 = s%fr
               f3 = f
            else ! xl < x < xr
               x1 = s%xl
               x2 = s%x
               x3 = s%xr
               f1 = s%fl
               f2 = f
               f3 = s%fr
            end if
         end if

         call line_search_interpolate(x1, x2, x3, f1, f2, f3, x_new, s%is_convex)
         step = enlarge*(x3 - x1)
         if(s%is_convex)then
            if(x_new < x1)then
               xlim = x1 - step
               s%is_within = xlim <= x_new
               if(s%is_within)then
                  s%x = x_new
               else
                  s%x = xlim
               end if
               call update_(s, x1, x2, f1, f2)
            else if(x3 < x_new)then
               xlim = x3 + step
               s%is_within = x_new <= xlim
               if(s%is_within)then
                  s%x = x_new
               else
                  s%x = xlim
               end if
               call update_(s, x2, x3, f2, f3)
            else
               s%is_within = .true.
               s%x = x_new
               if(f1 < f3)then
                  call update_(s, x1, x2, f1, f2)
               else
                  call update_(s, x2, x3, f2, f3)
               end if
            end if
         else
            s%is_within = .false.
            if(x_new < x2)then
               s%x = x1 - step
               call update_(s, x1, x2 ,f1, f2)
            else
               s%x = x3 + step
               call update_(s, x2, x3 ,f2, f3)
            end if
         end if
      end subroutine updateLineSearchState<%= k %>_0


      subroutine update_LineSearchState<%= k %>_0(s, xl, xr, fl, fr)
         type(LineSearchState<%= k %>_0), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: xl, xr, fl, fr

         s%xl = xl
         s%xr = xr
         s%fl = fl
         s%fr = fr
      end subroutine update_LineSearchState<%= k %>_0


      subroutine initLineSearchState<%= k %>_0(s, dx)
         type(LineSearchState<%= k %>_0), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: dx

         ASSERT(abs(dx) > 0)
         s%is_convex = .false.
         s%is_within = .false.
         s%iter = 0
         s%dx = dx
         if(s%dx > 0)then
            s%xl = 0
            s%xr = dx
            s%x = s%xl
         else
            s%xr = 0
            s%xl = dx
            s%x = s%xr
         end if
      end subroutine initLineSearchState<%= k %>_0


      subroutine line_search_interpolate<%= k %>_0(x1, x2, x3, f1, f2, f3, x_opt, is_convex)
         Real(kind=real<%= k %>), intent(in):: x1, x2, x3, f1, f2, f3
         Real(kind=real<%= k %>), intent(out):: x_opt
         Logical(kind=int8), intent(out):: is_convex
         Real(kind=real<%= k %>):: x12, x13, x23, f1x1213, f2x1223, f3x1323, a, b_neg

         x12 = x1 - x2
         x13 = x1 - x3
         x23 = x2 - x3
         f1x1213 = f1/(x12*x13)
         f2x1223 = f2/(x12*x23)
         f3x1323 = f3/(x13*x23)
         a = f1x1213 - f2x1223 + f3x1323
         is_convex = a > 0
         if(is_convex)then
            b_neg = f1x1213*(x2 + x3) - f2x1223*(x1 + x3) + f3x1323*(x1 + x2)
            x_opt = b_neg/(2*a)
         else if(f1 < f2)then
            if(f1 < f3)then
               x_opt = x1
            else
               x_opt = x3
            end if
         else if(f2 < f3)then
            x_opt = x2
         else
            x_opt = x3
         end if
      end subroutine line_search_interpolate<%= k %>_0


      ! use gradient information

      subroutine updateLineSearchState<%= k %>_1(s, f, g)
         ! call init(s, dx)
         ! do
         !    call update(s, f(x0 + s%x), grad(x0 + s%x))
         ! end do
         type(LineSearchState<%= k %>_1), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: f, g
         Real(kind=real<%= k %>):: x1, f1, g1, x2, f2, g2, step, xl, xr, x_new, xlim
         Real(kind=real<%= k %>), parameter:: enlarge = 2

         if(s%iter < 0)then
            RAISE('`LineSearchState<%= k %>_0` should be `init`ialized before `update`d')
         end if
         s%iter = s%iter + 1
         if(s%iter == 1)then
            s%x_best = s%x
            s%f_best = f
            s%g_best = g
            if(g*s%dx > 0)then
               s%x = s%x_best - s%dx
            else
               s%x = s%x_best + s%dx
            end if
            return
         end if

         if(f < s%f_best)then
            x1 = s%x
            f1 = f
            g1 = g
            x2 = s%x_best
            f2 = s%f_best
            g2 = s%g_best
         else
            x1 = s%x_best
            f1 = s%f_best
            g1 = s%g_best
            x2 = s%x
            f2 = f
            g2 = g
         end if

         if(g1 == 0)then
            call update_(s, x1, f1, g1)
            s%is_convex = .true.
            s%is_within = .true.
            s%x = x1
            return
         end if

         xl = min(x1, x2)
         xr = max(x1, x2)
         step = enlarge*(xr - xl)

         call line_search_interpolate(x1, f1, g1, x2, f2, x_new, s%is_convex)
         call update_(s, x1, f1, g1)
         if(s%is_convex)then
            if(x_new < xl)then
               xlim = xl - step
               s%is_within = xlim <= x_new
            else if(xr < x_new)then
               xlim = xr + step
               s%is_within = x_new <= xlim
            else
               s%is_within = .true.
            end if
            if(s%is_within)then
               s%x = x_new
            else
               s%x = xlim
            end if
         else
            s%is_within = .false.
            if(g1 < 0)then
               s%x = x1 + step
            else if(g1 > 0)then
               s%x = x1 - step
            end if
         end if
      end subroutine updateLineSearchState<%= k %>_1


      subroutine update_LineSearchState<%= k %>_1(s, x_best, f_best, g_best)
         type(LineSearchState<%= k %>_1), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: x_best, f_best, g_best

         s%x_best = x_best
         s%f_best = f_best
         s%g_best = g_best
      end subroutine update_LineSearchState<%= k %>_1


      subroutine initLineSearchState<%= k %>_1(s, dx)
         type(LineSearchState<%= k %>_1), intent(inout):: s
         Real(kind=real<%= k %>), intent(in):: dx

         ASSERT(abs(dx) > 0)
         s%is_convex = .false.
         s%is_within = .false.
         s%iter = 0
         s%dx = dx
         s%x = 0
         s%x_best = get_infinity()
         s%f_best = get_infinity()
         s%g_best = get_infinity()
      end subroutine initLineSearchState<%= k %>_1


      subroutine line_search_interpolate<%= k %>_1(x1, f1, g1, x2, f2, x_new, is_convex)
         Real(kind=real<%= k %>), intent(in):: x1, f1, g1, x2, f2
         Real(kind=real<%= k %>), intent(out):: x_new
         Logical(kind=int8), intent(out):: is_convex
         Real(kind=real<%= k %>):: x12, a

         x12 = x2 - x1
         a = ((f2 - f1) - g1*x12)/x12**2
         is_convex = a > 0
         if(is_convex)then
            x_new = x1 - g1/(2*a)
         else if(f1 < f2)then
            x_new = x1
         else
            x_new = x2
         end if
      end subroutine line_search_interpolate<%= k %>_1


      pure function nnls<%= k %>(A, b) result(ret)
         Real(kind=real<%= k %>), intent(in):: A(:, :), b(:)
         Real(kind=kind(A)), allocatable:: tAA(:, :), tAb(:), x(:), x_pre(:), g(:), ret(:)
         Real(kind=kind(A)):: d, d_pre, alpha, alpha_, l2_Ag
         Integer(kind=INT64):: i, n

         n = size(A, 2, kind=kind(n))
         tAA = matmul(transpose(A), A)
         tAb = matmul(transpose(A), b)
         allocate(x_pre(n))
         allocate(g(n))
         x_pre(:) = 0
         x = x_pre
         d_pre = get_infinity()
         do
            d = l2_norm(b - matmul(A, x))
            ! use `.not.` not to leak `NaN`.
            ! `=` here is essential in some cases.
            if(.not.(d <= d_pre))then
               ! numerical error causes `x(i) < 0` for some `i`
               ret = max(x_pre, real(0, kind=kind(x_pre)))
               return
            end if
            d_pre = d
            g(:) = tAb - matmul(tAA, x)
            alpha = get_infinity()
            do ALL_OF(i, g, 1)
               if(g(i) < 0)then
                  if(x(i) <= 0)then
                     g(i) = 0
                  else
                     alpha_ = x(i)/(-g(i))
                     if(alpha_ < alpha)then
                        if(alpha_ <= 0)then
                           g(i) = 0
                        else
                           alpha = alpha_
                        end if
                     end if
                  end if
               end if
            end do

            x_pre(:) = x
            l2_Ag = l2_norm(matmul(A, g))
            if(l2_Ag <= 0)then
               ret = max(x_pre, real(0, kind=kind(x_pre)))
               return
            end if
            x(:) = x + min(l2_norm(g)/l2_Ag, alpha)*g
         end do
      end function nnls<%= k %>
   <%- } -%>
end module optimize_lib
