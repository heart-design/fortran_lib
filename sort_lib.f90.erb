<%
  require 'fort'

  INTEGERS = ::Fort::Type::Integer.multi_provide(dim: 0)
  REALS = ::Fort::Type::Real.multi_provide(dim: 0)
  TYPES = INTEGERS + REALS
%>

#include "fortran_lib.h"
module sort_lib
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   USE_FORTRAN_LIB_H
   use, non_intrinsic:: comparable_lib, only: is_nan, is_infinity

   use, non_intrinsic:: stack_lib, only: push, pop
   use, non_intrinsic:: stack_lib, only: IntegerDim0KindINT64Stack
   use, non_intrinsic:: array_lib, only: get

   implicit none

   private

   public:: insertion_sort, insertion_sorting
   public:: quick_sort, quick_sorting
   public:: merge_sort, merge_sorting
   public:: median
   public:: select
   public:: partitioning

   <% TYPES.each{|t| %>
      interface median
         module procedure median<%= t %>
      end interface median

      interface medianing
         module procedure medianing<%= t %>
      end interface medianing

      interface median_of_medianing
         module procedure median_of_medianing<%= t %>
      end interface median_of_medianing

      <% INTEGERS.each{|ti| %>
         interface select
            module procedure select<%= t %><%= ti %>
         end interface select

         interface selecting
            module procedure selecting<%= t %><%= ti %>
         end interface selecting
      <% } %>

      interface partitioning
         module procedure partitioning<%= t %>
      end interface partitioning

      interface partitioning_impl
         module procedure partitioning_impl<%= t %>
      end interface partitioning_impl

      interface insertion_sort
         module procedure insertion_sort<%= t %>
      end interface insertion_sort

      interface insertion_sorting
         module procedure insertion_sorting<%= t %>
      end interface insertion_sorting

      interface insertion_sorting_impl
         module procedure insertion_sorting_impl<%= t %>
      end interface insertion_sorting_impl

      interface quick_sort
         module procedure quick_sort<%= t %>
      end interface quick_sort

      interface quick_sorting
         module procedure quick_sorting<%= t %>
      end interface quick_sorting

      interface get_pivot
         module procedure get_pivot<%= t %>
      end interface get_pivot

      interface merge_sort
         module procedure merge_sort<%= t %>
      end interface merge_sort

      interface merge_sorting
         module procedure merge_sorting<%= t %>
      end interface merge_sorting

      interface merge_sorting_impl
         module procedure merge_sorting_impl<%= t %>
      end interface merge_sorting_impl

      interface merge_sorted_lists
         module procedure merge_sorted_lists<%= t %>
      end interface merge_sorted_lists

      interface swapping
         module procedure swapping<%= t %>
      end interface swapping
   <% } %>

contains

   <% TYPES.each{|t| %>
      function median<%= t %>(xs) result(ret)
         <%= t.declare %>, intent(in):: xs(:)
         <%= t.declare %>:: xsCopy(size(xs, dim=1, kind=INT64))
         Real(kind=<%= t.type == :Real ? t.kind : :REAL32  %>):: ret

         xsCopy = xs
         ret = medianing(xsCopy)
      end function median<%= t %>

      function medianing<%= t %>(xs) result(ret)
         <%= t.declare %>, intent(inout):: xs(:)
         Real(kind=<%= t.type == :Real ? t.kind : :REAL32  %>):: ret
         Integer(kind=INT64):: nXs

         nXS = size(xs, dim=1, kind=kind(nXs))
         ASSERT(nXs > 0)
         if(mod(nXs, 2) == 1)then
            ret = selecting(xs, nXs/2 + 1)
         else
            ret = (real(selecting(xs, nXs/2), kind=kind(ret))/2) + (real(selecting(xs, nXs/2 + 1), kind=kind(ret))/2)
         end if
      end function medianing<%= t %>

      recursive function median_of_medianing<%= t %>(xs) result(ret)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>:: ret
         Integer(kind=INT64):: nXs
         Integer(kind=kind(nXs)):: i

         nXS = size(xs, dim=1, kind=kind(nXs))
         ret = select([(selecting(xs((5*(i - 1) + 1):(5*i)), 3), i = 1, nXs/5)], nXs/10 + 1)
      end function median_of_medianing<%= t %>

      <% INTEGERS.each{|ti| %>
         recursive function select<%= t %><%= ti %>(xs, k) result(ret)
            <%= t.declare %>, intent(in):: xs(:)
            <%= ti.declare %>, intent(in):: k
            <%= t.declare %>:: ret
            <%= t.declare %>:: xsCopy(size(xs, dim=1, kind=INT64))

            xsCopy = xs
            ret = selecting(xsCopy, k)
         end function select<%= t %><%= ti %>

         recursive function selecting<%= t %><%= ti %>(xs, k) result(ret)
            <%= t.declare %>, intent(inout):: xs(:)
            <%= ti.declare %>, intent(in):: k
            <%= t.declare %>:: ret
            <%= t.declare %>:: pivot
            Integer(kind=INT64):: iPivot

            if(size(xs, dim=1, kind=INT64) > 14)then
               pivot = median_of_medianing(xs)
               call partitioning_impl(xs, pivot, iPivot)
               if(k <= iPivot)then
                  ret = selecting(xs(:iPivot), k)
               else
                  ret = selecting(xs((iPivot + 1):), k - iPivot)
               end if
            else
               ret = get(merge_sort(xs), k)
            end if
         end function selecting<%= t %><%= ti %>
      <% } %>

      subroutine partitioning<%= t %>(xs, pivot, iPivot)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>, intent(in):: pivot
         Integer(kind=INT64), intent(out):: iPivot

         ASSERT(minval(xs) <= pivot .and. pivot <= maxval(xs))
         call partitioning_impl(xs, pivot, iPivot)
      end subroutine partitioning<%= t %>

      ! Assume `min(xs) <= pivot <= max(xs)`
      subroutine partitioning_impl<%= t %>(xs, pivot, iPivot)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>, intent(in):: pivot
         Integer(kind=INT64), intent(out):: iPivot
         Integer(kind=kind(iPivot)):: iL, iR

         iL = 1
         iR = size(xs, dim=1, kind=kind(iR))
         if(iL < iR)then
            do
               do while(xs(iL) < pivot)
                  iL = iL + 1
               end do
               do while(pivot < xs(iR))
                  iR = iR - 1
               end do
               if(iR <= iL) exit
               call swapping(xs(iL), xs(iR))
               iL = iL + 1
               iR = iR - 1
            end do
         end if
         iPivot = iR
      end subroutine partitioning_impl<%= t %>

      function insertion_sort<%= t %>(xs) result(ret)
         <%= t.declare %>, intent(in):: xs(:)
         <%= t.declare %>:: ret(size(xs, kind=INT64))

         ret = xs
         call insertion_sorting(ret)
      end function insertion_sort<%= t %>

      subroutine insertion_sorting<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)

         ASSERT(.not.any(is_nan(xs)))
         call insertion_sorting_impl(xs)
      end subroutine insertion_sorting<%= t %>

      subroutine insertion_sorting_impl<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)
         Integer(kind=INT64):: i, j
         <%= t.type %>(kind=<%= t.kind %>):: tmp

         do i = int(2, kind=kind(i)), size(xs, kind=kind(i))
            tmp = xs(i)
            if(xs(i - 1) > tmp)then
               j = i
               do while(j > 1)
                  if(xs(j - 1) <= tmp) exit
                  xs(j) = xs(j - 1)
                  j = j - 1
               end do
               xs(j) = tmp
            end if
         end do
      end subroutine insertion_sorting_impl<%= t %>

      function quick_sort<%= t %>(xs) result(xsSorted)
         <%= t.declare %>, intent(in):: xs(:)
         <%= t.declare %>:: xsSorted(size(xs, kind=INT64))

         xsSorted = xs
         call quick_sorting(xsSorted)
      end function quick_sort<%= t %>

      subroutine quick_sorting<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>:: pivot
         type(IntegerDim0KindINT64Stack):: iLs, iRs
         Integer(kind = INT64):: iL, iR, iPivot
         Logical:: isUniform

         ASSERT(.not.any(is_nan(xs)))

         call push(iLs, 1_INT64)
         call push(iRs, size(xs, dim = 1, kind = kind(iR)))

         do while(pop(iRs, iR)) ! Loop for all segments on the stacks.
            ASSERT(pop(iLs, iL)) ! Left most index of the current segment.

            do while(iL < iR) ! While current segment remains
               if(iR - iL > 7)then
                  pivot = get_pivot(xs(iL:iR), isUniform)
                  if(isUniform) exit

                  call partitioning_impl(xs(iL:iR), pivot, iPivot)
                  call push(iRs, iR)
                  iR = iPivot + iL - 1 ! Right most index of the current segment
                  call push(iLs, iR + 1)
               else
                  call insertion_sorting_impl(xs)
                  return
               end if
            end do
         end do
      end subroutine quick_sorting<%= t %>

      function get_pivot<%= t %>(xs, isUniform) result(pivot)
         <%= t.declare %>:: pivot
         <%= t.declare %>, intent(in):: xs(:)
         Logical, intent(out):: isUniform
         <%= t.declare %>:: tmpX
         Integer(kind = INT64):: iXs, nXs

         isUniform = .false.

         nXs = size(xs, dim = 1, kind = kind(nXs))

         if(xs(1) /= xs(nXs))then
            pivot = min(xs(1), xs(nXs))
            return
         end if

         tmpX = xs(1)
         do iXs = 2, nXs - 1
            if(xs(iXs) /= tmpX)then
               pivot = min(xs(iXs), tmpX)
               return
            end if
         end do

         pivot = huge(pivot)
         isUniform = .true.
      end function get_pivot<%= t %>

      function merge_sort<%= t %>(xs) result(xsSorted)
         <%= t.declare %>, intent(in):: xs(:)
         <%= t.declare %>:: xsSorted(size(xs, kind=INT64))

         xsSorted = xs
         call merge_sorting<%= t %>(xsSorted)
      end function merge_sort<%= t %>

      subroutine merge_sorting<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>:: buf(size(xs, dim=1, kind=INT64))
         Logical(kind=INT8):: isRetInBuf

         ASSERT(.not.any(is_nan(xs)))
         call merge_sorting_impl<%= t %>(xs, buf, isRetInBuf)
         if(isRetInBuf)then
            xs = buf
         end if
      end subroutine merge_sorting<%= t %>

      recursive subroutine merge_sorting_impl<%= t %>(xs, buf, isRetInBuf)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>, intent(out):: buf(:)
         Logical(kind=INT8), intent(out):: isRetInBuf
         Logical(kind=kind(isRetInBuf)):: isLeftRetInBuf, isRightRetInBuf
         Integer(kind = INT64):: nXs, iL, iR

         nXs = size(xs, dim = 1, kind = kind(nXs))
         iL = nXs/2
         iR = iL + 1
         if(nXs > 7)then
            call merge_sorting_impl(xs(:iL), buf(:iL), isLeftRetInBuf)
            call merge_sorting_impl(xs(iR:), buf(iR:), isRightRetInBuf)
            if(isLeftRetInBuf)then
               if(.not.isRightRetInBuf)then
                  buf(iR:) = xs(iR:)
               end if
               call merge_sorted_lists(buf(:iL), buf(iR:), xs)
               isRetInBuf = .false.
            else
               if(isRightRetInBuf)then
                  buf(:iL) = xs(:iL)
                  call merge_sorted_lists(buf(:iL), buf(iR:), xs)
                  isRetInBuf = .false.
               else
                  call merge_sorted_lists(xs(:iL), xs(iR:), buf)
                  isRetInBuf = .true.
               end if
            end if
         else
            call insertion_sorting_impl(xs)
            isRetInBuf = .false.
         end if
      end subroutine merge_sorting_impl<%= t %>

      ! Merge sorted 1-D array xs and ys into zs.
      subroutine merge_sorted_lists<%= t %>(xs, ys, zs)
         <%= t.declare %>, intent(in):: xs(:), ys(:)
         <%= t.declare %>, intent(out):: zs(size(xs, dim=1, kind=INT64) + size(ys, dim=1, kind=INT64))
         Integer(kind = INT64):: iXs, nXs, iYs, nYs, iZs, nZs

         nXs = size(xs, dim = 1, kind = kind(nXs))
         nYs = size(ys, dim = 1, kind = kind(nYs))
         nZs = size(zs, dim = 1, kind = kind(nZs))

         iXs = 1
         iYs = 1
         iZs = 1
         do while(iXs <= nXs .and. iYs <= nYs)
            if(xs(iXs) <= ys(iYs))then
               zs(iZs) = xs(iXs)
               iXs = iXs + 1
            else
               zs(iZs) = ys(iYs)
               iYs = iYs + 1
            end if
            iZs = iZs + 1
         end do

         if(iXs <= nXs)then
            zs(iZs:nZs) = xs(iXs:nXs)
         else
            zs(iZs:nZs) = ys(iYs:nYs)
         end if
      end subroutine merge_sorted_lists<%= t %>

      elemental subroutine swapping<%= t %>(a, b)
         <%= t.declare %>, intent(inout):: a, b
         <%= t.declare %>:: swap

         swap = b
         b = a
         a = swap
      end subroutine swapping<%= t %>
   <% } %>
end module sort_lib
