<%
def array_from_str(str)
  str\
    .split(/\n+/)\
    .map(&:strip)\
    .delete_if{|line| line =~ /\A[#!]/}\
    .map{|line| line\
      .split(/;/)\
      .map(&:strip)}
end

TRUE_PAIRS = array_from_str(<<-EOS)
0;	0
1;	1
-1;	-1
huge(0);	huge(0)
-huge(0);	-huge(0)
1_INT32;	1_INT64
0_INT32;	0_INT64

0.0;	0.0
1.0;	1.0
-1.0;	-1.0
huge(0.0);	huge(0.0)
-huge(0.0);	-huge(0.0)
0.0;	1*epsilon(0.0)*tiny(0.0)
0.0;	-1*epsilon(0.0)*tiny(0.0)
1.0;	1.0 + 1*epsilon(0.0)
1.0;	1.0 - 1*epsilon(0.0)
0.0_REAL32;	0.0_REAL64
1.0_REAL32;	1.0_REAL64
0.0d0;	1*epsilon(0.0)*tiny(0.0)
0.0d0;	-1*epsilon(0.0)*tiny(0.0)
1.0d0;	1.0 + 1*epsilon(0.0)

cmplx(0.0, 0.0);	cmplx(0.0, 0.0)
cmplx(1.0, -1.0);	cmplx(1.0, -1.0)
cmplx(0.0, 1*epsilon(0.0)*tiny(0.0));	cmplx(-1*epsilon(0.0)*tiny(0.0), 0)
cmplx(1.0, 1.0 - 1*epsilon(0.0));	cmplx(1.0 + 1*epsilon(0.0), 1.0)

4.7;	2.3*2 + 0.1
EOS

FALSE_PAIRS = array_from_str(<<-EOS)
0.0;	2*epsilon(0.0)*tiny(0.0)
0.0;	-2*epsilon(0.0)*tiny(0.0)
1.0;	1.0 + 3*epsilon(0.0)
1.0;	1.0 - 2*epsilon(0.0)
1.0d0;	1.0 - 2*epsilon(0.0)

cmplx(0.0, 2*epsilon(0.0)*tiny(0.0));	cmplx(0.0, 0.0)
cmplx(1.0, 1.0 - 2*epsilon(0.0));	cmplx(1.0, 1.0)

# cancellation of significant digits
4.7 - 2.3*2;	0.1
EOS
%>

#include "fortran_lib.h"
program comparable_lib_test
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: OUTPUT_UNIT, INPUT_UNIT, REAL32, REAL64, INT8, INT32, INT64
   use, non_intrinsic:: constant_lib, only: get_nan, get_infinity
   use, non_intrinsic:: comparable_lib
   implicit none

   ! almost_equal for real with integer
   TEST(almost_equal(3.0, 3))
   TEST(almost_equal(3, 3.0))
   TEST(.not.almost_equal(0d0, 3))
   TEST(.not.almost_equal(3, 0d0))

   TEST(.true. == .true.)
   TEST(.false. == .false.)
   TEST(.not.(.false. == .true.))
   TEST(.not.(.true. == .false.))
   TEST(.true. == logical(.true., kind=INT8))

   TEST(.not.is_nan(0.0))
   TEST(.not.is_nan(0.0_REAL64))
   TEST(.not.is_nan(0))
   TEST(.not.is_nan(0_INT64))
   TEST(is_nan(get_nan()))

   TEST(.not.is_infinity(0.0))
   TEST(.not.is_infinity(0.0_REAL64))
   TEST(.not.is_infinity(0))
   TEST(.not.is_infinity(0_INT64))
   TEST(is_infinity(get_infinity()))

   TEST(.not.almost_equal(get_nan(), 0.0))
   TEST(almost_equal(get_nan(), get_nan()))

   TEST(.not.almost_equal(get_infinity(), 0.0))
   TEST(.not.almost_equal(get_infinity(), -get_infinity()))
   TEST(almost_equal(get_infinity(), get_infinity()))

   <% TRUE_PAIRS.each{|i1, i2| %>
      TEST(almost_equal(<%= i1 %>, <%= i2 %>))
   <% } %>

   <% FALSE_PAIRS.each{|i1, i2| %>
      TEST(.not.almost_equal(<%= i1 %>, <%= i2 %>))
   <% } %>

   ! rtol
   TEST(.not.almost_equal(1.0, 0.9, rtol=0.1))
   TEST(almost_equal(1.0, 0.9*(1 + epsilon(0.0)), rtol=0.1))

   ! atol
   TEST(.not.almost_equal(0.0, 0.1*(1 + epsilon(0.0)), atol=0.1))
   TEST(almost_equal(0.0, 0.1, atol=0.1))

   ! rtol = 0, atol = 0
   TEST(almost_equal(1.0, 1.0, rtol=0.0, atol=0.0))

   write(OUTPUT_UNIT, *) "SUCCESS: ", __FILE__
   stop
end program comparable_lib_test
