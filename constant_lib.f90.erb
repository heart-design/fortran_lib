<%-
  require 'fort'

  REALS = ::Fort::Type::Real.multi_provide(dim: 0)
-%>

module constant_lib
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   use, intrinsic:: iso_fortran_env, only: INT8

   implicit none

   private

   public:: get_nan
   public:: get_infinity
   public:: rad_from_deg, deg_from_rad

   character, parameter, public:: TAB = char(9)
   <%- REALS.each{|t| -%>
      <%= t.declare %>, parameter, public:: PI<%= t %> = 4*atan(1.0_<%= t.kind %>)
      <%= t.declare %>, parameter, public:: PI_<%= t.kind %> = PI<%= t %>
   <%- } -%>
   Integer, parameter, public:: ZERO = 0_INT8, ONE = 1_INT8

   <%- REALS.each{|t| -%>
      interface deg_from_rad
         module procedure deg_from_rad<%= t %>
      end interface deg_from_rad

      interface rad_from_deg
         module procedure rad_from_deg<%= t %>
      end interface rad_from_deg
   <%- } -%>

contains

   elemental function get_nan() result(answer)
      real(REAL32):: answer

      character(len = len('NaN')):: buf ! buf can not be a parameter.

      buf = 'NaN'
      read(buf, *) answer
   end function get_nan

   elemental function get_infinity() result(answer)
      real(REAL32):: answer

      character(len = len('Infinity')):: buf ! buf can not be a parameter.

      buf = 'Infinity'
      read(buf, *) answer
   end function get_infinity

   <%- REALS.each{|t| -%>
      elemental function rad_from_deg<%= t %>(deg) result(rad)
         <%= t.declare %>, parameter:: PI = PI<%= t %>
         <%= t.declare %>, intent(in):: deg
         <%= t.declare %>:: rad

         rad = PI*deg/180
      end function rad_from_deg<%= t %>

      elemental function deg_from_rad<%= t %>(rad) result(deg)
         <%= t.declare %>, parameter:: PI = PI<%= t %>
         <%= t.declare %>, intent(in):: rad
         <%= t.declare %>:: deg

         deg = 180*rad/PI
      end function deg_from_rad<%= t %>
   <%- } -%>
end module constant_lib
