<%
# - `delete(node)` should be defined.
# - `KEY(node)` macro should be defined.
%>


subroutine delete<%= @tree_type_id %><%= @node_type_id %>(tree, me)
   <%= @tree_type_declare %>, intent(inout):: tree
   <%= @node_type_declare %>, pointer, intent(inout):: me
   <%= @node_type_declare %>, pointer:: new_me

   if(.not.associated(me%left))then
      call transplant<%= @tree_type_id %><%= @node_type_id %>(tree, me, me%right)
   elseif(.not.associated(me%right))then
      call transplant<%= @tree_type_id %><%= @node_type_id %>(tree, me, me%left)
   else
      new_me => first_impl<%= @node_type_id %>(me%right)
      if(KEY(new_me%parent) /= KEY(me))then
         call transplant<%= @tree_type_id %><%= @node_type_id %>(tree, new_me, new_me%right)
         new_me%right => me%right
         new_me%right%parent => new_me
      end if
      call transplant<%= @tree_type_id %><%= @node_type_id %>(tree, me, new_me)
      new_me%left => me%left
      new_me%left%parent => new_me
      call delete(me)
   end if
end subroutine delete<%= @tree_type_id %><%= @node_type_id %>


subroutine put<%= @tree_type_id %><%= @node_type_id %>(tree, new_node)
   <%= @tree_type_declare %>, intent(inout):: tree
   <%= @node_type_declare %>, pointer, intent(inout):: new_node
   <%= @node_type_declare %>, pointer:: parent, me

   parent => null()
   me => tree%root
   do while(associated(me))
      if(KEY(new_node) == KEY(me))then
         call replace<%= @tree_type_id %><%= @node_type_id %>(tree, me, new_node)
         call delete(me)
      else
         parent => me
         if(KEY(new_node) < KEY(me))then
            me => me%left
         elseif(KEY(me) < KEY(new_node))then
            me => me%right
         end if
      end if
   end do
   new_node%parent => parent
   if(associated(parent))then
      if(KEY(new_node) < KEY(parent))then
         parent%left => new_node
      else
         parent%right => new_node
      end if
   else
      tree%root => new_node
   end if
end subroutine put<%= @tree_type_id %><%= @node_type_id %>


<%= render memoized_read('binary_tree_common_template.f90.erb') %>
