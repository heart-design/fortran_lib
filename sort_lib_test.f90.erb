<%-
def enlarge(sml_n, scale)
  sml_n\
    .map{|array| array\
      .map{|n| n*scale}}\
    .map{|array| [array, array.sort]}
end

SCALE_UNI = 1
SCALE_I = 2**31 - 1
SCALE_F = 3.402823E+38

SML = [-1, 0, 1]
SML_SETS = [
  SML.product(SML),
  SML.product(SML, SML),
  SML.product(SML, SML, SML),
  SML.product(SML, SML, SML, SML),
]

SORTS = [:quick, :merge, :insertion]
-%>

#include "fortran_lib.h"
program sort_lib_test
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: OUTPUT_UNIT, REAL64, INT64, INT32, REAL32
   use, non_intrinsic:: constant_lib, only: get_infinity
   use, non_intrinsic:: comparable_lib, only: almost_equal
   use, non_intrinsic:: random_lib, only: random_seed_by_time
   use, non_intrinsic:: array_lib, only: get
   use, non_intrinsic:: sort_lib

   implicit none

   Integer:: i
   Integer, allocatable:: seeds(:)
   Integer:: nDArray
   Real(kind = REAL64), allocatable:: dArray(:), sortedDArray(:)
   Integer:: ns(2), ms(2), nsForPartitioning(5)
   Integer(kind=INT64):: iPivot
   Integer(kind=INT32):: iSelect, nSelect, iSelect_
   Integer(kind=INT32):: iMedian, nMedian
   Real(kind=REAL32):: rMedian(101)

   call random_seed_by_time(seeds)
   PRINT_VARIABLE(seeds)

   TEST(almost_equal(median([1, 2, 3, 4]), 2.5))
   TEST(almost_equal(median([1, 2, 3, 4, 5]), 3.0))
   TEST(almost_equal(median([1]), 1.0))


   do nMedian = 1, 100
      if(mod(nMedian, 2) == 1)then
         ASSERT(almost_equal(median([(iMedian, iMedian = nMedian, 1, -1)]), real(nMedian/2 + 1, kind=REAL32)))
      else
         ASSERT(almost_equal(median([(iMedian, iMedian = 1, nMedian)]), real(nMedian/2, kind=REAL32) + real(5e-1, kind=REAL32)))
      end if
   end do
   call random_number(rMedian)
   ASSERT(almost_equal(median(rMedian), get(quick_sort(rMedian), 51)))

   do nSelect = 1, 100
      do iSelect = 1, nSelect
         ASSERT(select([(iSelect_, iSelect_ = nSelect, 1, -1)], iSelect) == iSelect)
         ASSERT(select([(iSelect_, iSelect_ = 1, nSelect)], iSelect) == iSelect)
      end do
   end do

   ! size 0
   <%- SORTS.each{|name| -%>
      TEST(size(<%= name %>_sort([(i, i = 1, 0)])) == 0)
      TEST(size(<%= name %>_sort([(dble(i), i = 1, 0)])) == 0)
   <%- } -%>

   ! size 1
   <%- SORTS.each{|name| -%>
      TEST(all(<%= name %>_sort([0]) == [0]))
      TEST(all(almost_equal(<%= name %>_sort([0.0]), [0.0])))
   <%- } -%>

   <%- SORTS.each{|name| -%>
      <%- [SML_SETS.last].each{|sml_set| -%>
         <%- enlarge(sml_set, SCALE_UNI).each{|input, sorted| -%>
            TEST(all(<%= name %>_sort(<%= input.inspect %>) == <%= sorted.inspect %>))
         <%- } -%>

         <%- enlarge(sml_set, SCALE_I).each{|input, sorted| -%>
            TEST(all(<%= name %>_sort(<%= input.inspect %>) == <%= sorted.inspect %>))
         <%- } -%>

         <%- enlarge(sml_set, SCALE_F).each{|input, sorted| -%>
            TEST(all(almost_equal(<%= name %>_sort(<%= input.inspect %>), <%= sorted.inspect %>)))
         <%- } -%>
      <%- } -%>
   <%- } -%>

   do nDArray = 1, 2049
      allocate(dArray(nDArray))
      call random_number(dArray)
      dArray = dArray*0.01 - 0.005
      <%- SORTS.each{|name| -%>
         sortedDArray = <%= name %>_sort(dArray)
         ASSERT(all(sortedDArray(1:nDArray - 1) <= sortedDArray(2:nDArray)))
      <%- } -%>
      deallocate(dArray)
   end do
   nDArray = 10000
   allocate(dArray(nDArray))
   call random_number(dArray)
   dArray = dArray*0.01 - 0.005
   <%- SORTS.each{|name| -%>
      sortedDArray = <%= name %>_sort(dArray)
      TEST(all(sortedDArray(1:nDArray - 1) <= sortedDArray(2:nDArray)))
   <%- } -%>
   deallocate(dArray)

   ! Infinity
   <%- SORTS.each{|name| -%>
      TEST(all(almost_equal(<%= name %>_sort([0.0, get_infinity(), -get_infinity()]), [-get_infinity(), 0.0, get_infinity()])))
   <%- } -%>

   ! Bug check
   <%- SORTS.each{|name| -%>
      TEST(all(almost_equal(<%= name %>_sort([0.992602646, 0.992602706]), [0.992602646, 0.992602706])))
   <%- } -%>

   write(OUTPUT_UNIT, *) 'SUCCESS: ', __FILE__
   stop
end program sort_lib_test
