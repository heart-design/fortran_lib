<%-
  require 'fort'

  REALS = ::Fort::Type::Real.multi_provide(dim: 0)
-%>

# include "fortran_lib.h"
module geodetic_lib
   USE_FORTRAN_LIB_H
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>

   use, non_intrinsic:: constant_lib, only: deg_from_rad, rad_from_deg
   <%- REALS.each{|t| -%>
      use, non_intrinsic:: constant_lib, only: PI<%= t %>
   <%- } -%>

   implicit none

   private
   public:: ecef_from_wgs84, wgs84_from_ecef

   ! WGS84
   ! http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf (google by nga wgs84)
   Real(kind = REAL64), parameter, public:: WGS84_A         = 6378137.0_REAL64                ! semi-major axis (m)
   Real(kind = REAL64), parameter, public:: WGS84_F         = 1/298.257223563_REAL64          ! flattening
   Real(kind = REAL64), parameter, public:: WGS84_W         = 7292115.0_REAL64*10**(-11)      ! angular velocity of the earth (rad/s)
   Real(kind = REAL64), parameter, public:: WGS84_GM        = 3986004.418_REAL64*10**8        ! earth's gravitational constant (mass of earth's atmosphere included) (m**3/s**2)
   Real(kind = REAL64), parameter, public:: WGS84_GM_PRIME  = 3986000.9_REAL64*10**8          ! gravitational constant (mass of earth's atmosphere not included) (m**3/s**2) 1 sigma is +/- 0.1*10**8 (m**3/s**2)
   Real(kind = REAL32), parameter, public:: WGS84_GM_A      = 3.5_REAL32*10**8                ! gm of the earth's atmosphere (m**3/s**2) 1 sigma is +/- 0.1*10**8 (m**3/s**2)
   Real(kind = REAL64), parameter, public:: WGS84_B         = 6356752.3142_REAL64             ! semi-minor axis (m)
   Real(kind = REAL64), parameter, public:: WGS84_E_2 = (WGS84_A**2 - WGS84_B**2)/WGS84_A**2 ! first eccentricity squared (original: 6.69437999014_REAL64*10**(-3))
   Real(kind = REAL64), parameter, public:: WGS84_E = sqrt(WGS84_E_2) ! first eccentricity: sqrt(1 - b**2/a**2) (original: 8.1819190842622_REAL64*10**(-2))
   Real(kind = REAL64), parameter, public:: WGS84_E_PRIME   = 8.2094437949696_REAL64*10**(-2) ! second eccentricity: sqrt(a**2/b**2 - 1)
   Real(kind = REAL64), parameter, public:: WGS84_E_PRIME_2 = 6.73949674228_REAL64*10**(-3)   ! second eccentricity squared

   <%- REALS.each{|t| -%>
     interface ecef_from_wgs84
        module procedure ecef_from_wgs84<%= t %>
        module procedure ecef_from_wgs84_array<%= t %>
     end interface ecef_from_wgs84

     interface ecef_from_wgs84_rad
        module procedure ecef_from_wgs84_rad<%= t %>
     end interface ecef_from_wgs84_rad

     interface wgs84_from_ecef
        module procedure wgs84_from_ecef<%= t %>
        module procedure wgs84_from_ecef_array<%= t %>
     end interface wgs84_from_ecef

     interface wgs84_rad_from_ecef
        module procedure wgs84_rad_from_ecef<%= t %>
     end interface wgs84_rad_from_ecef

     interface normalize_lon
        module procedure normalize_lon<%= t %>
     end interface normalize_lon

     interface normalize_lon_rad
        module procedure normalize_lon_rad<%= t %>
     end interface normalize_lon_rad

     interface get_l
        module procedure get_l<%= t %>
     end interface get_l
   <%- } -%>

contains

   <%- REALS.each{|t| -%>
      function ecef_from_wgs84_array<%= t %>(lonLatH) result(xyz)
         <%= t.declare %>, intent(in):: lonLatH(1:3) ! (deg, deg, m)
         <%= t.declare %>:: xyz(1:3) ! (m, m, m)

         xyz = ecef_from_wgs84(lonLatH(1), lonLatH(2), lonLatH(3))
      end function ecef_from_wgs84_array<%= t %>

      function ecef_from_wgs84<%= t %>(lon, lat, h) result(xyz)
         <%= t.declare %>, intent(in):: lat ! (deg)
         <%= t.declare %>, intent(in):: lon ! (deg)
         <%= t.declare %>, intent(in):: h ! (m)
         <%= t.declare %>:: xyz(1:3) ! (m, m, m)

         ASSERT(-90 <= lat .and. lat <= 90)
         xyz = ecef_from_wgs84_rad(rad_from_deg(lon), rad_from_deg(lat), h)
      end function ecef_from_wgs84<%= t %>

      function ecef_from_wgs84_rad<%= t %>(lon, lat, h) result(xyz)
         Real(kind = min(<%= t.kind %>, kind(WGS84_E_2))), parameter:: E_2 = real(WGS84_E_2, kind = min(<%= t.kind %>, kind(WGS84_E_2)))
         <%= t.declare %>, parameter:: HALF_PI = PI<%= t %>/2
         <%= t.declare %>, intent(in):: lat ! (rad)
         <%= t.declare %>, intent(in):: lon ! (rad)
         <%= t.declare %>, intent(in):: h ! (m)
         <%= t.declare %>:: xyz(1:3) ! (m, m, m)
         <%= t.declare %>:: l

         ASSERT(-HALF_PI <= lat .and. lat <= HALF_PI)

         l = get_l(lat)
         xyz(1) = (l + h)*cos(lat)*cos(lon)
         xyz(2) = (l + h)*cos(lat)*sin(lon)
         xyz(3) = ((1 - E_2)*l + h)*sin(lat)
      end function ecef_from_wgs84_rad<%= t %>

      function wgs84_from_ecef_array<%= t %>(xyz) result(lonLatH)
         <%= t.declare %>, intent(in):: xyz(1:3) ! (m, m, m)
         <%= t.declare %>:: lonLatH(1:3)

         lonLatH = wgs84_from_ecef(xyz(1), xyz(2), xyz(3))

         ASSERT(-180 <= lonLatH(1) .and. lonLatH(1) <= 180)
         ASSERT(-90 <= lonLatH(2) .and. lonLatH(2) <= 90)
      end function wgs84_from_ecef_array<%= t %>

      function wgs84_from_ecef<%= t %>(x, y, z) result(lonLatH)
         <%= t.declare %>, intent(in):: x ! (m)
         <%= t.declare %>, intent(in):: y ! (m)
         <%= t.declare %>, intent(in):: z ! (m)
         <%= t.declare %>:: lonLatH(1:3) ! (deg, deg, m)
         <%= t.declare %>:: lonLatHRad(1:3)

         lonLatHRad = wgs84_rad_from_ecef(x, y, z)
         lonLatH(1:2) = deg_from_rad(lonLatHRad(1:2))
         lonLatH(3) = lonLatHRad(3)

         ASSERT(-180 <= lonLatH(1) .and. lonLatH(1) <= 180)
         ASSERT(-90 <= lonLatH(2) .and. lonLatH(2) <= 90)
      end function wgs84_from_ecef<%= t %>

      recursive function wgs84_rad_from_ecef<%= t %>(x, y, z) result(lonLatH)
         <%= t.declare %>, parameter:: PI = PI<%= t %>
         Real(kind = kind(WGS84_A)), parameter:: A = WGS84_A
         Real(kind = kind(WGS84_B)), parameter:: B = WGS84_B
         Real(kind = min(<%= t.kind %>, kind(WGS84_E_2))), parameter:: E_2 = real(WGS84_E_2, kind = min(<%= t.kind %>, kind(WGS84_E_2)))
         Integer, parameter:: N_DIVISION = 2**3
         <%= t.declare %>, intent(in):: x ! (m)
         <%= t.declare %>, intent(in):: y ! (m)
         <%= t.declare %>, intent(in):: z ! (m)
         <%= t.declare %>:: lonLatH(1:3) ! (rad, rad, m)
         <%= t.declare %>:: lon, lat
         <%= t.declare %>:: xy
         Logical:: isLatGe45Degree

         ASSERT(N_DIVISION >= 2)

         if(z < 0)then
            lonLatH = wgs84_rad_from_ecef(x, y, -z)
            lonLatH(2) = -lonLatH(2)
         else
            lon = atan2(y, x)
            xy = hypot(x, y)

            isLatGe45Degree = (z >= xy - (A**2 - B**2)/sqrt(A**2 + B**2))
            if(isLatGe45Degree)then
               call get_lat(get_x, xy, z, (3*PI)/8, PI/8, lat)
               lonLatH(3) = z/sin(lat) - (1 - E_2)*get_l(lat)
            else
               call get_lat(get_z, z, xy, PI/8, PI/8, lat)
               lonLatH(3) = x/cos(lat) - get_l(lat)
            end if

            lonLatH(1) = lon
            lonLatH(2) = lat
         end if

         ASSERT(-PI <= lonLatH(1) .and. lonLatH(1) <= PI)
         ASSERT(-PI/2 <= lonLatH(2) .and. lonLatH(2) <= PI/2)

      contains

         subroutine get_lat(get_p, p, q, lat0, latWidth, lat)
            interface
               function get_p (lat, c) result(answer)
                  <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>

                  <%= t.declare %>, intent(in):: lat
                  <%= t.declare %>, intent(in):: c
                  <%= t.declare %>:: answer
               end function get_p
            end interface

            Integer, parameter:: N_DIVISION = 2**3

            <%= t.declare %>, intent(in):: p ! (m)
            <%= t.declare %>, intent(in):: q ! (m)
            <%= t.declare %>, intent(in):: lat0 ! Initial value (rad)
            <%= t.declare %>, intent(in):: latWidth ! (rad)
            <%= t.declare %>, intent(out):: lat ! (rad)
            <%= t.declare %>:: latBest, lat0_, lat_, dLat
            <%= t.declare %>:: residualMin, residual
            Integer:: iLat

            lat0_ = lat0
            latBest = lat0_
            lat_ = latBest
            residualMin = abs(p - get_p(lat_, q))
            dLat = latWidth
            ! Grid search for the best lat.
            do while(dLat >= tiny(dLat) .and. dLat >= latBest*epsilon(latBest)/N_DIVISION)
               dLat = dLat/N_DIVISION ! Increase precision
               do iLat = -N_DIVISION + 1, N_DIVISION - 1
                  lat_ = lat0_ + iLat*dLat
                  residual = abs(p - get_p(lat_, q))
                  if(residual < residualMin)then
                     latBest = lat_
                     residualMin = residual
                  end if
               end do
               lat0_ = latBest
            end do

            lat = latBest
         end subroutine get_lat

         function get_x(lat, z) result(answer)
            Real(kind = min(<%= t.kind %>, kind(WGS84_E_2))), parameter:: E_2 = real(WGS84_E_2, kind = min(<%= t.kind %>, kind(WGS84_E_2)))
            <%= t.declare %>, intent(in):: lat ! (rad)
            <%= t.declare %>, intent(in):: z ! (m)
            <%= t.declare %>:: answer

            answer = (z/sin(lat) + E_2*get_l(lat))*cos(lat)
         end function get_x

         function get_z(lat, xy) result(answer)
            Real(kind = min(<%= t.kind %>, kind(WGS84_E_2))), parameter:: E_2 = real(WGS84_E_2, kind = min(<%= t.kind %>, kind(WGS84_E_2)))
            <%= t.declare %>, intent(in):: lat ! (rad)
            <%= t.declare %>, intent(in):: xy ! (m)
            <%= t.declare %>:: answer

            answer = (xy - E_2*get_l(lat)*cos(lat))*tan(lat)
         end function get_z
      end function wgs84_rad_from_ecef<%= t %>

      function get_l<%= t %>(lat) result(answer)
         Real(kind = min(<%= t.kind %>, kind(WGS84_E_2))), parameter:: E_2 = real(WGS84_E_2, kind = min(<%= t.kind %>, kind(WGS84_E_2)))
         Real(kind = min(<%= t.kind %>, kind(WGS84_A))), parameter:: A = real(WGS84_A, kind = min(<%= t.kind %>, kind(WGS84_A)))
         <%= t.declare %>, intent(in):: lat ! (rad)
         <%= t.declare %>:: answer

         answer = A/sqrt(1 - E_2*(sin(lat)**2))
      end function get_l<%= t %>

      function normalize_lon<%= t %>(lon) result(answer)
         <%= t.declare %>, intent(in):: lon ! (deg)
         <%= t.declare %>:: answer ! (deg)

         if(lon < -180 .or. 180 < lon)then
            answer = lon - floor(lon/180)*180
         else
            answer = lon
         end if

         ASSERT(-180 <= lon .and. lon <= 180)
      end function normalize_lon<%= t %>

      function normalize_lon_rad<%= t %>(lon) result(answer)
         <%= t.declare %>, parameter:: PI = PI<%= t %>
         <%= t.declare %>, intent(in):: lon ! (rad)
         <%= t.declare %>:: answer ! (rad)

         if(lon < PI .or. PI < lon)then
            answer = lon - floor(lon/PI)*PI
         else
            answer = lon
         end if

         ASSERT(-PI <= lon .and. lon <= PI)
      end function normalize_lon_rad<%= t %>
   <%- } -%>
end module geodetic_lib
