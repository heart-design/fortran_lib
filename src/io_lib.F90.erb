<%
  require 'fort'

  TYPES\
  = ::Fort::Type::Logical.multi_provide(dim: (1..7))\
  + ::Fort::Type::Integer.multi_provide(dim: (1..7))\
  + ::Fort::Type::Real.multi_provide(dim: (1..7))\
  + ::Fort::Type::Complex.multi_provide(dim: (1..7))\
  + ::Fort::Type::Character.multi_provide(dim: (1..7))

  LOGICAL_DIM_0S = ::Fort::Type::Logical.multi_provide(dim: 0)
  INTEGER_DIM_0S = ::Fort::Type::Integer.multi_provide(dim: 0)
  REAL_DIM_0S = ::Fort::Type::Real.multi_provide(dim: 0)
  COMPLEX_DIM_0S = ::Fort::Type::Complex.multi_provide(dim: 0)

  def list(n, joint = ', ', &block)
    (1..n).to_a.map(&block).join(joint)
  end

  NUM_DESC_MAX = 10
  LEN_TYPE_STR_MAX = TYPES.map(&:to_s).map(&:size).max
%>

#include "fortran_lib.h"
module io_lib
   use, intrinsic:: iso_fortran_env, only: ERROR_UNIT, INPUT_UNIT, OUTPUT_UNIT
   use, intrinsic:: iso_fortran_env, only: INT64
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
# ifdef __INTEL_COMPILER
   use, non_intrinsic:: ifport, only: system
# endif
   use, non_intrinsic:: constant_lib, only: TAB
   use, non_intrinsic:: character_lib, only: s, str, operator(+)
   use, non_intrinsic:: config_lib, only: get_config_value

   implicit none

   private
   public:: VERSION, ARRAY_DATA_FILE, ARRAY_META_FILE, ARRAY_VERSION_FILE, ARRAY_DESCRIPTION_FILE
   public:: get_column_format_string
   public:: dump, load, load_version, load_meta
   public:: get_line_number, number_of_columns, file_shape
   public:: mktemp
   public:: sh

   integer, parameter:: VERSION = 2 ! Array file format's compatibility.
   Integer, parameter:: LEN_DATA_TYPE_STR_MAX = <%= LEN_TYPE_STR_MAX %>
   character(len = *), parameter:: ARRAY_DATA_FILE = 'data.bin'
   character(len=*), parameter:: ARRAY_META_FILE_V_1 = 'meta.nml'
   character(len=*), parameter:: ARRAY_META_FILE_V_2 = 'meta.kv'
   character(len=*), parameter:: ARRAY_META_FILE = ARRAY_META_FILE_V_2
   character(len = *), parameter:: ARRAY_VERSION_FILE = 'version.dat'
   character(len = *), parameter:: ARRAY_DESCRIPTION_FILE = 'description.txt'

   type, public:: ArrayMeta
      Character(len=LEN_DATA_TYPE_STR_MAX):: dataType
      Integer:: dim
      Integer, allocatable:: sizes(:)
   end type ArrayMeta

   <%- (LOGICAL_DIM_0S + INTEGER_DIM_0S + REAL_DIM_0S + COMPLEX_DIM_0S).each{|t| -%>
      interface get_column_format_string
         module procedure get_column_format_string<%= t %>
      end interface get_column_format_string
   <%- } -%>

   interface load_meta
      module procedure load_array_meta
   end interface load_meta

   interface load_version
      module procedure load_array_version
   end interface load_version

   <%- TYPES.each{|t| -%>
      interface dump
         module procedure dump_array<%= t %>
      end interface dump

      interface load
         module procedure load_array<%= t %>
      end interface load

      interface load_v_2
         module procedure load_array_v_2<%= t %>
      end interface load_v_2

      interface load_v_1
         module procedure load_array_v_1<%= t %>
      end interface load_v_1
   <%- } -%>

contains

   <%- LOGICAL_DIM_0S.each{|t| -%>
      ! '(256(1x, l1))'
      function get_column_format_string<%= t %>(x, n) result(ret)
         <%= t.declare %>, intent(in):: x
         Integer, intent(in):: n
         Character(len=:), allocatable:: ret

         ASSERT(n >= 1)
         ret = '(' + str(n) + '(1x, l1))'
      end function get_column_format_string<%= t %>
   <%- } -%>

   <%- INTEGER_DIM_0S.each{|t| -%>
      ! '(256(1x, i11))'
      function get_column_format_string<%= t %>(x, n) result(ret)
         <%= t.declare %>, intent(in):: x
         Integer, intent(in):: n
         Character(len=:), allocatable:: ret

         ASSERT(n >= 1)
         ret = '(' + str(n) + '(1x, i' + str(len(str(huge(x))) + 1) + '))'
      end function get_column_format_string<%= t %>
   <%- } -%>

   <%- REAL_DIM_0S.each{|t| -%>
      ! '(256(1x, es13.7))'
      function get_column_format_string<%= t %>(x, n) result(ret)
         Integer, parameter:: PADDING_FOR_ES = 6
         Integer, parameter:: MORE_PREC = 1

         <%= t.declare %>, intent(in):: x
         Integer, intent(in):: n

         Character(len=:), allocatable:: ret

         Integer:: prec

         ASSERT(n >= 1)

         prec = precision(x) + MORE_PREC
         ret = '(' + str(n) + '(1x, es' + str(prec + PADDING_FOR_ES) + '.' + str(prec) + '))'
      end function get_column_format_string<%= t %>
   <%- } -%>

   <%- COMPLEX_DIM_0S.each{|t| -%>
      ! '(256(1x, "(", es13.7, ",", es13.7, ")"))'
      function get_column_format_string<%= t %>(x, n) result(ret)
         Integer, parameter:: PADDING_FOR_ES = 6
         Integer, parameter:: MORE_PREC = 1

         <%= t.declare %>, intent(in):: x
         Integer, intent(in):: n

         Character(len=:), allocatable:: ret

         Integer:: prec

         ASSERT(n >= 1)

         prec = precision(x) + MORE_PREC
         ret = '(' + str(n) + '(1x, "(", es' + str(prec + PADDING_FOR_ES) + '.' + str(prec) + ', ",", es' + str(prec + PADDING_FOR_ES) + '.' + str(prec) + ', ")"))'
      end function get_column_format_string<%= t %>
   <%- } -%>

   function sh(cmd) result(isSuccess)
      Character(len = *), intent(in):: cmd
      Logical:: isSuccess
      Integer:: exitStatus

# ifdef __INTEL_COMPILER
      exitStatus = system(trim(cmd))
# else
      call execute_command_line(trim(cmd), exitstat = exitStatus)
# endif

      isSuccess = (exitStatus == 0)
   end function sh

   subroutine mktemp(io, suffixMin, form, file, suffix)
      Character(len = *), parameter:: PREFIX = '/tmp/io_lib_mktemp.'

      Integer, intent(out):: io
      Integer(kind = INT64), intent(in), optional:: suffixMin
      Character(len = *), intent(in), optional:: form
      Character(len = *), intent(out), optional:: file
      Integer(kind = kind(suffixMin)), intent(out), optional:: suffix

      Integer(kind = kind(suffixMin)):: suffix_, suffixMin_
      Integer:: openStatus
      Character(len = len(PREFIX) + ceiling(log10(real(huge(suffix_))))):: file_
      Character(len = max(len('unformatted'), len('formatted'))):: form_

      form_ = 'formatted'
      if(present(form))then
         ASSERT(form == 'formatted' .or. form == 'unformatted')
         form_ = form
      end if

      suffixMin_ = 0
      if(present(suffixMin)) suffixMin_ = suffixMin
      do suffix_ = suffixMin_, huge(suffix)
         file_ = PREFIX + str(suffix_)
         open(newunit = io, file = trim(file_), status = 'new', action = 'readwrite', form = trim(form_), iostat = openStatus)
         if(openStatus == 0)then
            ASSERT(sh('chmod og-rwx ' + trim(file_)))

            if(present(file))then
               ASSERT(len_trim(file_) <= len(file))
               file = file_
            end if
            if(present(suffix)) suffix = suffix_

            return
         end if
      end do

      RAISE('Could not create temp file')
   end subroutine mktemp

   ! @desc Return a size 2 array which contains (/numberOfLines, numberOfColumns/) of the file fileName.
   function file_shape(fileName, numberOfHeaders) result(answer)
      integer(8):: answer(1:2)
      character(len = *), intent(in):: fileName
      integer, intent(in), optional:: numberOfHeaders

      integer:: numberOfHeaders_

      numberOfHeaders_ = 0
      if(present(numberOfHeaders)) numberOfHeaders_ = numberOfHeaders

      answer = (/get_line_number(fileName) - numberOfHeaders_, number_of_columns(fileName, numberOfHeaders_)/)
   end function file_shape

   function get_line_number(path) result(ret)
      Integer(kind=INT64):: ret
      character(len=*), intent(in):: path

      integer:: io, ios
      character:: trash

      open(newunit=io, file=path, status='old', action='read')
      ret = 0
      do
         read(io, *, iostat=ios) trash
         if(ios /= 0) exit
         ASSERT(ret < huge(ret))

         ret = ret + 1
      end do
      close(io)
   end function get_line_number

   ! @desc Return number of columns at line (numberOfHeaders + 1) in file fileName.
   ! @desc The line is separated by space and tabs character.
   ! @desc Quoted string containing space/tab characteres is not considared.
   function number_of_columns(fileName, numberOfHeaders) result(answer)
      integer(8):: answer
      character(len = *), intent(in):: fileName
      integer, intent(in), optional:: numberOfHeaders

      enum, bind(c)
         enumerator:: SEEK_NORMAL_CHAR, SEEK_SEPARATOR
      end enum
      character, parameter:: SEPARATORS(1:2) = [' ', TAB]

      integer:: rU1, ios, i, mode
      character:: c

      integer:: numberOfHeaders_

      numberOfHeaders_ = 0
      if(present(numberOfHeaders)) numberOfHeaders_ = numberOfHeaders

      mode = SEEK_NORMAL_CHAR
      answer = 0
      open(newunit = rU1, file = fileName, status = 'old', action = 'read', delim = 'quote')
      do i = 1, numberOfHeaders_
         read(rU1, *)
      end do
      do
         read(rU1, '(a1)', advance = 'no', iostat = ios) c
         if(is_iostat_bad(ios) .or. c == new_line('_')) exit

         select case(mode)
         case(SEEK_SEPARATOR)
            if(has_val(SEPARATORS, c)) mode = SEEK_NORMAL_CHAR
         case(SEEK_NORMAL_CHAR)
            if(.not.has_val(SEPARATORS, c))then
               ASSERT(answer <= huge(answer) - 1)

               answer = answer + 1
               mode = SEEK_SEPARATOR
            end if
         end select
      end do
      close(rU1)
   end function number_of_columns

   function load_array_version(arrayDir) result(version_)
      Character(len=*), intent(in):: arrayDir
      Integer:: version_
      Integer:: io

      open(newunit=io, file=s(arrayDir) + '/' + ARRAY_VERSION_FILE, status='old', action='read')
      read(io, *) version_
      close(io)
   end function load_array_version

   subroutine load_array_meta(self, arrayDir)
      type(ArrayMeta), intent(inout):: self
      Character(len=*), intent(in):: arrayDir
      Integer:: version_

      version_ = load_array_version(trim(arrayDir))
      select case(version_)
      case(2)
         call load_array_meta_v_2(self, trim(arrayDir))
      case default
         RAISE('Unsupported version ' + str(version_) + ' for ' + trim(arrayDir))
      end select
   end subroutine load_array_meta

   subroutine load_array_meta_v_2(self, arrayDir)
      type(ArrayMeta), intent(inout):: self
      Character(len=*), intent(in):: arrayDir

      Integer:: io
      Integer:: dim

      open(newunit=io, file=s(arrayDir) + '/' + ARRAY_META_FILE_V_2, status='old', action='read')
      ASSERT(get_config_value(io, 'dataType', self%dataType))
      ASSERT(get_config_value(io, 'dim', self%dim))
      if(allocated(self%sizes)) deallocate(self%sizes)
      allocate(self%sizes(1:self%dim))
      do ALL_OF(dim, self%sizes, 1)
         ASSERT(get_config_value(io, 'sizes(' + str(dim) + ')', self%sizes(dim)))
      end do
      close(io)
   end subroutine load_array_meta_v_2

   <%- TYPES.each{|t| -%>
      subroutine dump_array<%= t %>(self, arrayDir<%= list(NUM_DESC_MAX, ''){|i| ", desc#{i}"} %>)
         <%= t.declare %>, intent(in):: self
         character(len = *), intent(in):: arrayDir
         <%- if NUM_DESC_MAX >= 1 -%>
            character(len = *), intent(in), optional:: <%= list(NUM_DESC_MAX){|i| "desc#{i}"} %>
         <%- end -%>

         character(len = *), parameter:: DATA_TYPE_FOR_SELF = '<%= t %>'
         integer, parameter:: DIM_FOR_SELF = <%= t.dim %>

         character(len = len(DATA_TYPE_FOR_SELF)) dataType
         integer:: dim
         integer:: sizes(1:DIM_FOR_SELF)
         integer:: wU1

         ASSERT(sh('mkdir -p ' + trim(arrayDir)))

         open(newunit = wU1, file = s(arrayDir) + '/' + ARRAY_VERSION_FILE, status = 'replace', action = 'write')
         write(wU1, *) VERSION
         close(wU1)

         open(newunit = wU1, file = s(arrayDir) + '/' + ARRAY_DATA_FILE, status = 'replace', action = 'write', form = 'unformatted', access = 'stream')
         write(wU1) self
         close(wU1)

         dataType = DATA_TYPE_FOR_SELF
         dim = DIM_FOR_SELF
         sizes = shape(self)
         open(newunit = wU1, file = s(arrayDir) + '/' + ARRAY_META_FILE, status = 'replace', action = 'write')
         WRITE_KEY_VALUE(wU1, dim)
         WRITE_KEY_VALUE(wU1, dataType)
         <%- t.dim.times.each{|dim| -%>
           WRITE_KEY_VALUE(wU1, sizes(<%= dim + 1 %>))
         <%- } -%>
         close(wU1)


         open(newunit = wU1, file = s(arrayDir) + '/' + ARRAY_DESCRIPTION_FILE, status = 'replace', action = 'write')
         <%- (1..NUM_DESC_MAX).each{|i| -%>
            if(present(desc<%= i %>)) write(wU1, *) desc<%= i %>
         <%- } -%>
         close(wU1)
      end subroutine dump_array<%= t %>

      subroutine load_array<%= t %>(self, arrayDir)
         <%= t.declare %>, intent(inout), allocatable:: self
         character(len = *), intent(in):: arrayDir

         Integer:: version_

         version_ = load_array_version(trim(arrayDir))
         select case(version_)
         case(1)
            call load_v_1(self, arrayDir)
         case(2)
            call load_v_2(self, arrayDir)
         case default
            RAISE('Unsupported version ' + str(version_) + ' for ' + trim(arrayDir))
         end select
      end subroutine load_array<%= t %>

      subroutine load_array_v_2<%= t %>(self, arrayDir)
         <%= t.declare %>, intent(inout), allocatable:: self
         character(len = *), intent(in):: arrayDir

         character(len = *), parameter:: DATA_TYPE_FOR_SELF = '<%= t %>'
         integer, parameter:: DIM_FOR_SELF = <%= t.dim %>
         type(ArrayMeta):: meta
         integer:: io

         call load_array_meta_v_2(meta, trim(arrayDir))

         ASSERT(meta%dataType == DATA_TYPE_FOR_SELF)
         ASSERT(meta%dim == DIM_FOR_SELF)

         if(allocated(self)) deallocate(self)
         allocate(self(<%= list(t.dim){|i| "1:meta%sizes(#{i})"} %>))

         open(newunit=io, file=s(arrayDir) + '/' + ARRAY_DATA_FILE, status='old', action='read', form='unformatted', access='stream')
         read(io) self
      end subroutine load_array_v_2<%= t %>

      subroutine load_array_v_1<%= t %>(self, arrayDir)
         <%= t.declare %>, intent(inout), allocatable:: self
         character(len = *), intent(in):: arrayDir

         character(len = *), parameter:: DATA_TYPE_FOR_SELF = '<%= t %>'
         integer, parameter:: DIM_FOR_SELF = <%= t.dim %>
         character(len = <%= TYPES.map{|_| _.to_s.size}.max %>):: dataType
         integer:: dim
         integer:: sizes(1:DIM_FOR_SELF)
         integer:: rU1
         namelist /array_meta/ dataType, dim, sizes

         open(newunit = rU1, file = s(arrayDir) + '/' + ARRAY_META_FILE_V_1, status = 'old', action = 'read', delim = 'quote')
         read(rU1, nml = array_meta)

         ASSERT(s(dataType) == DATA_TYPE_FOR_SELF)
         ASSERT(dim == DIM_FOR_SELF)

         close(rU1)

         if(allocated(self)) deallocate(self)
         allocate(self(<%= list(t.dim){|i| "1:sizes(#{i})"} %>))

         open(newunit = rU1, file = s(arrayDir) + '/' + ARRAY_DATA_FILE, status = 'old', action = 'read', form = 'unformatted', access = 'stream')
         read(rU1) self
      end subroutine load_array_v_1<%= t %>
   <%- } -%>
end module io_lib
