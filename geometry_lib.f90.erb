<%-
   KS = [32, 64, 128]
-%>

#include "fortran_lib.h"
module geometry_lib
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: input_unit, output_unit, error_unit
   use, intrinsic:: iso_fortran_env, only: int64
   <%- KS.each{|k| -%>
      use, intrinsic:: iso_fortran_env, only: real<%= k %>
   <%- } -%>
   use, non_intrinsic:: math_lib, only: mod1

   implicit none

   private
   public:: is_in
   public:: size
   public:: load
   public:: shape_of
   public:: is_right_side
   public:: distance_and_angles
   public:: angle
   public:: perpendicular
   public:: distance
   public:: cross

   ! Interface

   <%- KS.each{|k| -%>
      interface is_in
         module procedure is_in_LeftConvexPolygon<%= k %>
      end interface is_in

      interface size
         module procedure size_LeftConvexPolygon<%= k %>
      end interface size

      interface load
         module procedure load_LeftConvexPolygon<%= k %>
      end interface load

      interface shape_of
         module procedure shape_of<%= k %>
      end interface shape_of

      interface is_right_side
         module procedure is_right_side<%= k %>
      end interface is_right_side

      interface distance_and_angles
         module procedure distance_and_angles<%= k %>
      end interface distance_and_angles

      interface angle
         module procedure angle<%= k %>
      end interface angle

      interface perpendicular
         module procedure perpendicular_1_<%= k %>
         module procedure perpendicular_2_<%= k %>
      end interface perpendicular

      interface distance
         module procedure distance<%= k %>
      end interface distance

      interface cross
         module procedure cross<%= k %>
      end interface cross
   <%- } -%>


   <%- KS.each{|k| -%>
      type, public:: LeftConvexPolygon<%= k %>
         Real(kind=real<%= k %>), allocatable:: xs(:)
         Real(kind=real<%= k %>), allocatable:: ys(:)
      end type LeftConvexPolygon<%= k %>
   <%- } -%>


   Integer, parameter, public:: point = 0
   Integer(kind=kind(point)), parameter, public:: line = 1
   Integer(kind=kind(point)), parameter, public:: left_convex_polygon = 2
   Integer(kind=kind(point)), parameter, public:: right_convex_polygon = 3
   Integer(kind=kind(point)), parameter, public:: other = 4


contains


   <%- KS.each{|k| -%>
      elemental function is_in_LeftConvexPolygon<%= k %>(self, x, y) result(ret)
         Logical:: ret
         type(LeftConvexPolygon<%= k %>), intent(in):: self
         Real(kind=real<%= k %>), intent(in):: x, y

         Integer(kind=int64):: i, n

         n = size(self)
         ret = .true.
         do i = 1, n
            if(cross(self%xs(i) - x, self%ys(i) - y, self%xs(mod1(i + 1, n)) - x, self%ys(mod1(i + 1, n)) - y) < 0)then
               ret = .false.
               return
            end if
         end do
      end function is_in_LeftConvexPolygon<%= k %>


      elemental function size_LeftConvexPolygon<%= k %>(self) result(ret)
         Integer(kind=int64):: ret
         type(LeftConvexPolygon<%= k %>), intent(in):: self

         ret = size(self%xs, kind=kind(ret))
      end function size_LeftConvexPolygon<%= k %>


      subroutine load_LeftConvexPolygon<%= k %>(self, unit)
         type(LeftConvexPolygon<%= k %>), intent(out):: self
         Integer(kind=kind(input_unit)), intent(in):: unit

         Integer(kind=int64):: i, n
         Integer(kind=kind(left_convex_polygon)):: shape

         read(unit) n
         ASSERT(n >= 3)
         allocate(self%xs(n))
         allocate(self%ys(n))
         do i = 1, n
            read(unit, *) self%xs(i), self%ys(i)
         end do

         shape = shape_of(self%xs, self%ys)
         ASSERT(shape == left_convex_polygon .or. shape == right_convex_polygon)
         if(shape == right_convex_polygon)then
            self%xs(:) = self%xs(n:1:-1)
            self%ys(:) = self%ys(n:1:-1)
         end if
      end subroutine load_LeftConvexPolygon<%= k %>


      function shape_of<%= k %>(xs, ys) result(ret)
         Integer(kind=kind(left_convex_polygon)):: ret
         Real(kind=real<%= k %>), intent(in):: xs(:), ys(size64(xs))

         Real(kind=real<%= k %>):: sig
         Integer(kind=int64):: i, n

         n = size(xs, kind=kind(n))
         select case(n)
         case(:0)
            ret = other
         case(1)
            ret = point
         case(2)
            ret = line
         case(3:)
            ret = line
            do i = 1, n
               sig = cross(xs(i) - xs(mod1(i - 1, n)), ys(i) - ys(mod1(i - 1, n)), xs(mod1(i + 1, n)) - xs(i), ys(mod1(i + 1, n)) - ys(i))
               select case(ret)
               case(line)
                  if(sig > 0)then
                     ret = left_convex_polygon
                  else if(sig < 0)then
                     ret = right_convex_polygon
                  end if
               case(left_convex_polygon)
                  if(sig < 0)then
                     ret = other
                     return
                  end if
               case(right_convex_polygon)
                  if(sig > 0)then
                     ret = other
                     return
                  end if
               case default
                  RAISE("Must not happen")
               end select
            end do
         end select
      end function shape_of<%= k %>


      elemental function is_right_side<%= k %>(px, py, ax, ay, bx, by) result(ret)
         ! p is at the right side of edge a->b
         Logical:: ret
         Real(kind=real<%= k %>), intent(in):: px, py, ax, ay, bx, by

         ret = cross(bx - ax, by - ay, px - ax, py - ay) > 0
      end function is_right_side<%= k %>


      elemental subroutine distance_and_angles<%= k %>(u1, u2, v1, v2, d, th_u, th_v)
         Real(kind=real<%= k %>), intent(in):: u1, u2, v1, v2
         Real(kind=real<%= k %>), intent(out):: d ! distance between the origin and line u->v
         Real(kind=real<%= k %>), intent(out):: th_u ! angle from intersection vector to u
         Real(kind=real<%= k %>), intent(out):: th_v ! angle from intersection vector to v

         Real(kind=real<%= k %>):: intersection1, intersection2

         d = distance(u1, u2, v1, v2) ! todo: norm2(intersection)
         call perpendicular(u1, u2, v1, v2, intersection1, intersection2)
         th_u = angle(intersection1, intersection2, u1, u2)
         th_v = angle(intersection1, intersection2, v1, v2)
      end subroutine distance_and_angles<%= k %>


      elemental function angle<%= k %>(u1, u2, v1, v2) result(ret)
         ! Return an angle from u to v
         Real(kind=real<%= k %>):: ret
         Real(kind=kind(ret)), intent(in):: u1, u2, v1, v2

         ret = atan2(cross(u1, u2, v1, v2), u1*v1 + u2*v2)
      end function angle<%= k %>


      elemental subroutine perpendicular_2_<%= k %>(u1, u2, v1, v2, w1, w2)
         ! Return a intersection point of line u->v and a line ⟂ u->v and passes the origin
         Real(kind=real<%= k %>), parameter:: one = 1
         Real(kind=kind(one)), intent(in):: u1, u2, v1, v2
         Real(kind=kind(one)), intent(out):: w1, w2
         Real(kind=kind(one)):: p_uv1, p_uv2, c

         call perpendicular(v1 - u1, v2 - u2, p_uv1, p_uv2)
         c = sign(one, u1*p_uv1 + u2*p_uv2)*distance(u1, u2, v1, v2)/hypot(p_uv1, p_uv2)
         w1 = c*p_uv1
         w2 = c*p_uv2
      end subroutine perpendicular_2_<%= k %>


      elemental subroutine perpendicular_1_<%= k %>(u1, u2, v1, v2)
         ! Return a vector ⟂ to u
         Real(kind=real<%= k %>), intent(in):: u1, u2
         Real(kind=real<%= k %>), intent(out):: v1, v2

         v1 = -u2
         v2 = u1
      end subroutine perpendicular_1_<%= k %>


      elemental function distance<%= k %>(u1, u2, v1, v2) result(ret)
         ! Return distance from the origin to a line u->v
         Real(kind=real<%= k %>):: ret
         Real(kind=kind(ret)), intent(in):: u1, u2, v1, v2

         ret = abs(cross(u1, u2, v1, v2))/hypot(v1 - u1, v2 - u2)
      end function distance<%= k %>


      elemental function cross<%= k %>(u1, u2, v1, v2) result(ret)
         ! Return component of cross product u×v
         Real(kind=real<%= k %>):: ret
         Real(kind=kind(ret)), intent(in):: u1, u2, v1, v2

         ret = u1*v2 - u2*v1
      end function cross<%= k %>
   <%- } -%>
end module geometry_lib
