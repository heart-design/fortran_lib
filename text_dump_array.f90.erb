<%
  require 'fort'

  TYPES_1\
  = ::Fort::Type::Logical.multi_provide(dim: [1])\
  + ::Fort::Type::Integer.multi_provide(dim: [1])\
  + ::Fort::Type::Real.multi_provide(dim: [1])\
  + ::Fort::Type::Complex.multi_provide(dim: [1])

  TYPES_2\
  = ::Fort::Type::Logical.multi_provide(dim: [2])\
  + ::Fort::Type::Integer.multi_provide(dim: [2])\
  + ::Fort::Type::Real.multi_provide(dim: [2])\
  + ::Fort::Type::Complex.multi_provide(dim: [2])

  TYPES = TYPES_1 + TYPES_2
%>

# include "fortran_lib.h"
! Text dump arbitrary 1-D or 2-D array (except for Character array) stored by io_lib/dump
program main
   USE_FORTRAN_LIB_H
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   use, intrinsic:: iso_fortran_env, only: input_unit, output_unit, error_unit, int64
   use, non_intrinsic:: character_lib, only: operator(+), str
   use, non_intrinsic:: io_lib, only: ArrayMetaV3
   use, non_intrinsic:: io_lib, only: load, load_version, load_meta_v_3, get_column_format_string

   implicit none

   <%- TYPES.each{|t| -%>
     <%= t.declare %>, allocatable:: array<%= t %>
   <%- } -%>
   Character(len=2**10):: dir
   type(ArrayMetaV3):: meta_v_3
   Integer(kind=int64):: version
   Integer:: i
   Integer:: status
   Character(len=:), allocatable:: form

   if(command_argument_count() /= 1) call usage_and_exit()
   call get_command_argument(1, value=dir, status=status)
   ASSERT(status == 0)

   if(dir == '-h' .or. dir == '--help') call usage_and_exit()

   version = load_version(trim(dir))
   select case(version)
   case(3)
      call load_meta_v_3(meta_v_3, trim(dir))
      if(.false.)then
      <%- (TYPES_1 + TYPES_2).each{|t| -%>
         else if(meta_v_3%type_ == '<%= t.type %>' .and. meta_v_3%kind_ == <%= t.kind %> .and. meta_v_3%dim == <%= t.dim %>)then
            call load(array<%= t %>, trim(dir))
            <%- if t.dim == 1 -%>
               do ALL_OF(i, array<%= t %>, 1)
                  write(output_unit, '(g0)') array<%= t %>(i)
               end do
            <%- else -%>
               form = get_column_format_string(array<%= t %>(1, 1), size(array<%= t %>, 2, kind=int64))
               do ALL_OF(i, array<%= t %>, 1)
                  write(output_unit, form) array<%= t %>(i, :)
               end do
            <%- end -%>
      <%- } -%>
      else
         ERROR('Unsupported data type: ' + str(meta_v_3%type_) + ' ' + str(meta_v_3%kind_) + ' ' + str(meta_v_3%dim))
      end if
   case default
      ERROR('Unsupported version: ' + str(version))
   end select

   stop

contains

   subroutine usage_and_exit()
      Character(len=2**10):: programName

      call get_command_argument(0, value=programName)
      write(ERROR_UNIT, *) trim(programName), ' ', 'ARRAY_DIR'

      error stop
   end subroutine usage_and_exit
end program main
