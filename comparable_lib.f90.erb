<%
  require 'fort'

  INTEGERS = ::Fort::Type::Integer.multi_provide(dim: 0)
  INTEGER_PAIRS = INTEGERS.product(INTEGERS)

  REALS = ::Fort::Type::Real.multi_provide(dim: 0)
  REAL_PAIRS = REALS.product(REALS)

  complexes = ::Fort::Type::Complex.multi_provide(dim: 0)
  COMPLEX_PAIRS = complexes.product(complexes)

  logicals = ::Fort::Type::Logical.multi_provide(dim: 0)
  LOGICAL_PAIRS = logicals.product(logicals)

  characters = ::Fort::Type::Character.multi_provide(dim: 0)
  CHARACTER_PAIRS = characters.product(characters)

  INTEGER_REAL_PAIRS = INTEGERS.product(REALS)
%>

module comparable_lib
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>

   implicit none

   private
   public:: almost_equal
   public:: operator(==)
   public:: is_nan
   public:: is_infinity

   <% (REALS + INTEGERS).each{|t| %>
      interface is_nan
         module procedure is_nan<%= t %>
      end interface is_nan

      interface is_infinity
         module procedure is_infinity<%= t %>
      end interface is_infinity
   <% } %>

   interface almost_equal
      <% (INTEGER_PAIRS + REAL_PAIRS + COMPLEX_PAIRS + LOGICAL_PAIRS + CHARACTER_PAIRS).each{|t1, t2| %>
         module procedure almost_equal<%= t1 %><%= t2 %>
      <% } %>
      <% INTEGER_REAL_PAIRS.each{|ti, tr| %>
         module procedure almost_equal<%= ti %><%= tr %>
         module procedure almost_equal<%= tr %><%= ti %>
      <% } %>
   end interface almost_equal

   interface operator(==)
      <% LOGICAL_PAIRS.each{|t1, t2| %>
         module procedure almost_equal<%= t1 %><%= t2 %>
      <% } %>
   end interface operator(==)

contains

   <% REALS.each{|t| %>
      elemental function is_nan<%= t %>(x) result(answer)
         logical:: answer
         <%= t.declare %>, intent(in):: x

         answer = (x /= x)
      end function is_nan<%= t %>

      elemental function is_infinity<%= t %>(x) result(answer)
         Logical:: answer
         <%= t.declare %>, intent(in):: x

         answer = x > huge(x)
      end function is_infinity<%= t %>
   <% } %>

   <% INTEGERS.each{|t| %>
      elemental function is_nan<%= t %>(n) result(answer)
         logical:: answer
         <%= t.declare %>, intent(in):: n

         answer = .false.
      end function is_nan<%= t %>

      elemental function is_infinity<%= t %>(x) result(answer)
         Logical:: answer
         <%= t.declare %>, intent(in):: x

         answer = .false.
      end function is_infinity<%= t %>
   <% } %>

   <% INTEGER_REAL_PAIRS.each{|ti, tr| %>
      elemental function almost_equal<%= ti %><%= tr %>(a, b, rtol, atol) result(ret)
         Logical:: ret
         <%= ti.declare %>, intent(in):: a
         <%= tr.declare %>, intent(in):: b
         Real(kind=kind(b)), intent(in), optional:: rtol
         Real(kind=kind(b)), intent(in), optional:: atol

         if(present(rtol))then
            if(present(atol))then
               ret = almost_equal(real(a, kind=kind(b)), b, rtol, atol)
            else
               ret = almost_equal(real(a, kind=kind(b)), b, rtol)
            end if
         else
            if(present(atol))then
               ret = almost_equal(real(a, kind=kind(b)), b, atol)
            else
               ret = almost_equal(real(a, kind=kind(b)), b)
            end if
         end if
      end function almost_equal<%= ti %><%= tr %>

      elemental function almost_equal<%= tr %><%= ti %>(a, b, rtol, atol) result(ret)
         Logical:: ret
         <%= tr.declare %>, intent(in):: a
         <%= ti.declare %>, intent(in):: b
         Real(kind=kind(a)), intent(in), optional:: rtol
         Real(kind=kind(a)), intent(in), optional:: atol

         if(present(rtol))then
            if(present(atol))then
               ret = almost_equal(a, real(b, kind=kind(a)), rtol, atol)
            else
               ret = almost_equal(a, real(b, kind=kind(a)), rtol)
            end if
         else
            if(present(atol))then
               ret = almost_equal(a, real(b, kind=kind(a)), atol)
            else
               ret = almost_equal(a, real(b, kind=kind(a)))
            end if
         end if
      end function almost_equal<%= tr %><%= ti %>
   <% } %>

   <% REAL_PAIRS.each{|t1, t2| %>
      ! This function assumes gradual underflow is not flushed to zero.
      ! For example, -no-ftz option should be added when you compile this module by ifort.
      elemental function almost_equal<%= t1 %><%= t2 %>(a, b, rtol, atol) result(answer)
         logical:: answer
         <%= t1.declare %>, intent(in):: a
         <%= t2.declare %>, intent(in):: b
         real(max(kind(a), kind(b))), intent(in), optional:: rtol
         real(max(kind(a), kind(b))), intent(in), optional:: atol

         real(max(kind(a), kind(b))):: delta, deltaRelative, deltaAbsolute
         real(min(kind(a), kind(b))):: lowerPrecision
         Logical:: isAInfinity, isBInfinity, isAMinusInfinity, isBMinusInfinity

         if(is_nan(a) .and. is_nan(b))then
            answer = .true.
            return
         end if

         isAInfinity = is_infinity(a)
         isBInfinity = is_infinity(b)
         isAMinusInfinity = is_infinity(-a)
         isBMinusInfinity = is_infinity(-b)

         if((isAInfinity .and. isBInfinity) .or. (isAMinusInfinity .and. isBMinusInfinity))then
            answer = .true.
            return
         end if

         if(isAInfinity .or. isBInfinity .or. isAMinusInfinity .or. isBMinusInfinity)then
            answer = .false.
            return
         end if

         if(present(rtol))then
            deltaRelative = max(abs(a)*rtol, abs(b)*rtol)
         else
            deltaRelative = max(epsilon(a)*abs(a), epsilon(b)*abs(b))
         end if

         if(present(atol))then
            deltaAbsolute = atol
         else
            deltaAbsolute = epsilon(lowerPrecision)*tiny(lowerPrecision)
         end if

         delta = max(deltaRelative, deltaAbsolute)
         answer = (abs(a - b) <= delta)
      end function almost_equal<%= t1 %><%= t2 %>
   <% } %>

   <% COMPLEX_PAIRS.each{|t1, t2| %>
      elemental function almost_equal<%= t1 %><%= t2 %>(a, b, delta) result(answer)
         logical:: answer
         <%= t1.declare %>, intent(in):: a
         <%= t2.declare %>, intent(in):: b
         real(max(kind(a), kind(b))), intent(in), optional:: delta

         if(present(delta))then
            answer = almost_equal(real(a), real(b), delta) .and. almost_equal(aimag(a), aimag(b), delta)
         else
            answer = almost_equal(real(a), real(b)) .and. almost_equal(aimag(a), aimag(b))
         end if
      end function almost_equal<%= t1 %><%= t2 %>
   <% } %>

   <% INTEGER_PAIRS.each{|t1, t2| %>
      elemental function almost_equal<%= t1 %><%= t2 %>(a, b) result(answer)
         logical:: answer
         <%= t1.declare %>, intent(in):: a
         <%= t2.declare %>, intent(in):: b

         answer = (a == b)
      end function almost_equal<%= t1 %><%= t2 %>
   <% } %>

   <% LOGICAL_PAIRS.each{|t1, t2| %>
      elemental function almost_equal<%= t1 %><%= t2 %>(a, b) result(answer)
         logical:: answer
         <%= t1.declare %>, intent(in):: a
         <%= t2.declare %>, intent(in):: b

         answer = a .eqv. b
      end function almost_equal<%= t1 %><%= t2 %>
   <% } %>

   <% CHARACTER_PAIRS.each{|t1, t2| %>
      elemental function almost_equal<%= t1 %><%= t2 %>(a, b) result(answer)
         logical:: answer
         <%= t1.declare %>, intent(in):: a
         <%= t2.declare %>, intent(in):: b

         answer = (a == b)
      end function almost_equal<%= t1 %><%= t2 %>
   <% } %>
end module comparable_lib
