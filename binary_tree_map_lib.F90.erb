<%-
  require 'fort'
  LOG_2_CHAR_LEN_MAX = 10
  REALS = ::Fort::Type::Real.multi_provide
  INTEGERS = ::Fort::Type::Integer.multi_provide
  LOGICALS = ::Fort::Type::Logical.multi_provide
  COMPLEXES = ::Fort::Type::Complex.multi_provide
  CHARACTERS = ::Fort::Type::Character.multi_provide(len: (0..LOG_2_CHAR_LEN_MAX).map{|n| 2**n})
  TYPES\
  = REALS\
  + INTEGERS\
  + LOGICALS\
  + COMPLEXES\
  + CHARACTERS
  CHARACTERS_DIM0_BY_TYPES = ::Fort::Type::Character.multi_provide(dim: 0, len: [1, 2, 2**7]).product(TYPES)
-%>

# include "fortran_lib.h"
module binary_tree_map_lib
   USE_FORTRAN_LIB_H
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   implicit none

   private

   public:: append
   public:: has_key
   public:: get_value

   <%- CHARACTERS_DIM0_BY_TYPES.each{|key_type, value_type| -%>
      interface append
         module procedure:: add<%= key_type %><%= value_type %>BinaryTreeMap
      end interface append

      interface has_key
         module procedure:: has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMap
      end interface has_key

      interface get_value
         module procedure:: get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMap
      end interface get_value

      interface append_node
         module procedure:: add<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
      end interface append_node

      interface has_key_node
         module procedure:: has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
      end interface has_key_node

      interface get_value_node
         module procedure:: get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
      end interface get_value_node
   <%- } -%>


   type, public:: BinaryTreeMap
   end type BinaryTreeMap

   type:: BinaryTreeMapNode
   end type BinaryTreeMapNode

   <%- CHARACTERS_DIM0_BY_TYPES.each{|key_type, value_type| -%>
      type, extends(BinaryTreeMap), public:: <%= key_type %><%= value_type %>BinaryTreeMap
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer:: root => null()
      end type <%= key_type %><%= value_type %>BinaryTreeMap

      type, extends(BinaryTreeMapNode):: <%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
         <%= key_type.declare %>:: key
         <%= value_type.declare %><%= (value_type.dim > 0) ? ', allocatable' : '' %>:: value
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer:: small => null()
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer:: large => null()
      end type <%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
   <%- } -%>

contains

   <%- CHARACTERS_DIM0_BY_TYPES.each{|key_type, value_type| -%>
      subroutine add<%= key_type %><%= value_type %>BinaryTreeMap(self, key, value)
         type(<%= key_type %><%= value_type %>BinaryTreeMap), intent(inout):: self
         Character(len = *), intent(in):: key
         <%= value_type.declare %>, intent(in):: value

         ASSERT(len_trim(key) <= <%= key_type.len %>)
         call append_node(self%root, key, value)
      end subroutine add<%= key_type %><%= value_type %>BinaryTreeMap

      recursive subroutine add<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode(self, key, value)
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer, intent(inout):: self
         Character(len = *), intent(in):: key
         <%= value_type.declare %>, intent(in):: value

         if(associated(self))then
            if(key < self%key)then
               call append_node(self%small, key, value)
            else if(key > self%key)then
               call append_node(self%large, key, value)
            else
               self%value = value
            end if
         else
            allocate(self)
            self%key = key
            self%value = value
         end if
      end subroutine add<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode

      function has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMap(self, key) result(answer)
         type(<%= key_type %><%= value_type %>BinaryTreeMap), intent(in):: self
         Character(len = *), intent(in):: key
         Logical:: answer

         if(len_trim(key) <= <%= key_type.len %>)then
            answer = has_key_node(self%root, key)
         else
            answer = .false.
         end if
      end function has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMap

      recursive function has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode(self, key) result(answer)
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer, intent(in):: self
         Character(len = *), intent(in):: key
         Logical:: answer

         if(associated(self))then
            if(key < self%key)then
               answer = has_key_node(self%small, key)
            else if(key > self%key)then
               answer = has_key_node(self%large, key)
            else
               answer = .true.
            end if
         else
            answer = .false.
         end if
      end function has_key<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode

      function get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMap(self, key, value) result(isSuccess)
         type(<%= key_type %><%= value_type %>BinaryTreeMap), intent(inout):: self
         Character(len = *), intent(in):: key
         <%= value_type.declare %><%= (value_type.dim > 0) ? ', allocatable' : '' %>, intent(out):: value
         Logical:: isSuccess

         if(len_trim(key) <= <%= key_type.len %>)then
            isSuccess = get_value_node(self%root, key, value)
         else
            isSuccess = .false.
         end if
      end function get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMap

      recursive function get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode(self, key, value) result(isSuccess)
         type(<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode), pointer, intent(in):: self
         Character(len = *), intent(in):: key
         <%= value_type.declare %><%= (value_type.dim > 0) ? ', allocatable' : '' %>, intent(out):: value
         Logical:: isSuccess

         if(associated(self))then
            if(key < self%key)then
               isSuccess = get_value_node(self%small, key, value)
            else if(key > self%key)then
               isSuccess = get_value_node(self%large, key, value)
            else
               value = self%value
               isSuccess = .true.
            end if
         else
            isSuccess = .false.
         end if
      end function get_value<%= key_type.id %><%= value_type.id %>BinaryTreeMapNode
   <%- } -%>
end module binary_tree_map_lib
