<%
  require 'fort'

  TYPES\
  = ::Fort::Type::Logical.multi_provide(dim: (1..7))\
  + ::Fort::Type::Integer.multi_provide(dim: (1..7))\
  + ::Fort::Type::Real.multi_provide(dim: (1..7))\
  + ::Fort::Type::Complex.multi_provide(dim: (1..7))

  LOGICAL_DIM_0S = ::Fort::Type::Logical.multi_provide(dim: 0)
  INTEGER_DIM_0S = ::Fort::Type::Integer.multi_provide(dim: 0)
  REAL_DIM_0S = ::Fort::Type::Real.multi_provide(dim: 0)
  COMPLEX_DIM_0S = ::Fort::Type::Complex.multi_provide(dim: 0)

  def list(n, joint = ', ', &block)
    (1..n).to_a.map(&block).join(joint)
  end

  NUM_DESC_MAX = 10
  LEN_TYPE_STR_MAX = TYPES.map{|t| t.type.size}.max
%>

#include "fortran_lib.h"
module io_lib
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: error_unit, input_unit, output_unit
   use, intrinsic:: iso_fortran_env, only: iostat_eor, iostat_end
   use, intrinsic:: iso_fortran_env, only: int64
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
# ifdef __INTEL_COMPILER
   use, non_intrinsic:: ifport, only: system
# endif
   use, non_intrinsic:: character_lib, only: str, operator(+)

   implicit none

   private
   public:: get_column_format_string
   public:: dump, load, load_version, load_meta_v_3
   public:: lines_of, columns_of, file_shape
   public:: mktemp
   public:: sh

   Integer(kind=int64), parameter, public:: version = 3 ! array serialization format version
   Character(len=*), parameter, public:: array_data_file = 'data.bin'
   Character(len=*), parameter:: array_meta_file_v_1 = 'meta.nml'
   Character(len=*), parameter:: array_meta_file_v_2 = 'meta.kv'
   Character(len=*), parameter:: array_meta_file_v_3 = 'meta.dat'
   Character(len=*), parameter, public:: array_meta_file = array_meta_file_v_3
   Character(len=*), parameter, public:: array_version_file = 'version.dat'
   Character(len=*), parameter, public:: array_description_file = 'description.txt'

   type, public:: ArrayMeta
   end type ArrayMeta

   type, extends(ArrayMeta), public:: ArrayMetaV3
      Character(len=<%= LEN_TYPE_STR_MAX %>):: type_ = 'UNINIT'
      Integer(kind=int8):: kind_ = -1
      Integer(kind=int8):: dim = -1
      Integer(kind=int64), allocatable:: sizes(:)
   end type ArrayMetaV3

   <%- (LOGICAL_DIM_0S + INTEGER_DIM_0S + REAL_DIM_0S + COMPLEX_DIM_0S).product(INTEGER_DIM_0S).each{|t, tn| -%>
      interface get_column_format_string
         module procedure get_column_format_string<%= t.id %><%= tn.id %>
      end interface get_column_format_string
   <%- } -%>

   interface lines_of
      module procedure lines_of
   end interface lines_of

   interface columns_of
      module procedure columns_of
   end interface columns_of

   interface load_meta_v_3
      module procedure load_array_meta_v_3
   end interface load_meta_v_3

   interface load_version
      module procedure load_array_version
   end interface load_version

   <%- TYPES.each{|t| -%>
      interface dump
         module procedure dump_array<%= t %>
      end interface dump

      interface load
         module procedure load_array<%= t %>
      end interface load
   <%- } -%>


contains


   function seek(unit, s) result(found)
      Logical:: found
      Integer(kind=kind(input_unit)), intent(in):: unit
      Character(len=*), intent(in):: s

      Character(len=100 + 2*len(s)):: buf
      Integer(kind=kind(iostat_eor)):: ios

      found = .false.
      rewind(unit)
      do
         read(unit, '(a)', iostat=ios) buf
         if(ios == iostat_end) return
         if(ios == iostat_eor) cycle
         if(buf == s)then
            found = .true.
            return
         end if
      end do
   end function seek


   <%- INTEGER_DIM_0S.each{|tn| -%>
      <%- (LOGICAL_DIM_0S + INTEGER_DIM_0S + REAL_DIM_0S).each{|t| -%>
         function get_column_format_string<%= t.id %><%= tn.id %>(x, n) result(ret)
            Character(len=*), parameter:: multi_args = '(g0, *(" ", g0))'
            <%= t.declare %>, intent(in):: x
            <%= tn.declare %>, intent(in):: n
            Character(len=len(multi_args)):: ret

            select case(n)
            case(:0)
               ret = '()'
            case(1)
               ret = '(g0)'
            case(2:)
               ret = multi_args
            end select
         end function get_column_format_string<%= t.id %><%= tn.id %>
      <%- } -%>

      ! `get_column_format_string` is used to produce re-readable complex output.
      ! number of columns should explicitly be given since unlimited format gives an extra parenthesis ` (` at the end.
      <%- COMPLEX_DIM_0S.each{|t| -%>
         function get_column_format_string<%= t.id %><%= tn.id %>(x, n) result(ret)
            Character(len=*), parameter:: multi_args = '("(", g0, ", ", g0, ")", *(" ", "(", g0, ", ", g0, ")"))'
            <%= t.declare %>, intent(in):: x
            <%= tn.declare %>, intent(in):: n
            Character(len=len(multi_args)):: ret

            select case(n)
            case(:0)
               ret = '()'
            case(1)
               ret = '("(", g0, ", ", g0, ")")'
            case(2:)
               ret = multi_args
            end select
         end function get_column_format_string<%= t.id %><%= tn.id %>
      <%- } -%>
   <%- } -%>

   function sh(cmd) result(isSuccess)
      Character(len=*), intent(in):: cmd
      Logical:: isSuccess
      Integer:: exitStatus

# ifdef __INTEL_COMPILER
      exitStatus = system(trim(cmd))
# else
      call execute_command_line(trim(cmd), exitstat=exitStatus)
# endif

      isSuccess = (exitStatus == 0)
   end function sh

   subroutine mktemp(unit, suffixMin, form, file, suffix)
      Character(len=*), parameter:: PREFIX = '/tmp/io_lib_mktemp.'

      Integer(kind=kind(input_unit)), intent(out):: unit
      Integer(kind=int64), intent(in), optional:: suffixMin
      Character(len=*), intent(in), optional:: form
      Character(len=*), intent(out), optional:: file
      Integer(kind=kind(suffixMin)), intent(out), optional:: suffix

      Integer(kind=kind(suffixMin)):: suffix_, suffixMin_
      Integer(kind=kind(iostat_eor)):: ios
      Character(len=len(PREFIX) + ceiling(log10(real(huge(suffix_))))):: file_
      Character(len=max(len('unformatted'), len('formatted'))):: form_

      form_ = 'formatted'
      if(present(form))then
         ASSERT(form == 'formatted' .or. form == 'unformatted')
         form_ = form
      end if

      suffixMin_ = 0
      if(present(suffixMin)) suffixMin_ = suffixMin
      do suffix_ = suffixMin_, huge(suffix)
         file_ = PREFIX + str(suffix_)
         open(newunit=unit, file=trim(file_), status='new', action='readwrite', form=trim(form_), iostat=ios)
         if(ios == 0)then
            ASSERT(sh('chmod og-rwx ' + trim(file_)))

            if(present(file))then
               ASSERT(len_trim(file_) <= len(file))
               file = file_
            end if
            if(present(suffix)) suffix = suffix_

            return
         end if
      end do

      ERROR('Could not create temp file')
   end subroutine mktemp

   function file_shape(file, n_headers) result(ret)
      ! Return a size 2 vector which contains `[n_lines, n_columns]` of `file`.
      Integer(int64):: ret(1:2)
      Character(len=*), intent(in):: file
      Integer(kind=kind(ret)), intent(in), optional:: n_headers

      Integer(kind=kind(n_headers)):: n_headers_

      n_headers_ = 0
      if(present(n_headers)) n_headers_ = n_headers

      ret = [lines_of(file) - n_headers_, columns_of(file, n_headers_)]
   end function file_shape

   function lines_of(file) result(ret)
      Integer(kind=int64):: ret
      Character(len=*), intent(in):: file

      Integer(kind=kind(input_unit)):: unit
      Integer(kind=kind(iostat_eor)):: ios
      Character:: trash

      open(newunit=unit, file=file, status='old', action='read')
      ret = 0
      do
         read(unit, *, iostat=ios) trash
         if(ios /= 0) exit
         ASSERT(ret < huge(ret))

         ret = ret + 1
      end do
      close(unit)
   end function lines_of

   function columns_of(file, n_headers) result(ret)
      ! Return number of columns at line `(n_headers + 1)` in `file`.
      ! The line is assumed to be separated by space and TAB characters.
      ! Quoted string containing space/TAB characteres is not handled properly.
      Integer(kind=int64):: ret
      Character(len=*), intent(in):: file
      Integer(kind=kind(ret)), intent(in), optional:: n_headers

      enum, bind(c)
         enumerator:: seek_normal_char, seek_separator
      end enum
      Character, parameter:: separators(1:2) = [' ', '	'] ! space and TAB

      Integer(kind=kind(input_unit)):: unit
      Integer(kind=kind(iostat_eor)):: ios
      Integer:: mode
      Character:: c

      Integer(kind=kind(n_headers)):: n_headers_, i

      n_headers_ = 0
      if(present(n_headers)) n_headers_ = n_headers

      mode = seek_normal_char
      ret = 0
      open(newunit=unit, file=file, status='old', action='read')
      do i = 1, n_headers_
         read(unit, *)
      end do
      do
         read(unit, '(a1)', advance='no', iostat=ios) c
         if(is_iostat_bad(ios) .or. c == new_line('_')) exit

         select case(mode)
         case(seek_separator)
            if(has_val(separators, c)) mode = seek_normal_char
         case(seek_normal_char)
            if(.not.has_val(separators, c))then
               ASSERT(ret <= huge(ret) - 1)

               ret = ret + 1
               mode = seek_separator
            end if
         end select
      end do
      close(unit)
   end function columns_of

   function load_array_version(dir) result(version_)
      Character(len=*), intent(in):: dir
      Integer:: version_
      Integer(kind=kind(input_unit)):: unit

      open(newunit=unit, file=trim(dir) + '/' + array_version_file, status='old', action='read')
      read(unit, *) version_
      close(unit)
   end function load_array_version

   subroutine load_array_meta_v_3(self, dir)
      type(ArrayMetaV3), intent(inout):: self
      Character(len=*), intent(in):: dir

      Integer(kind=kind(input_unit)):: unit
      Integer(kind=kind(self%dim)):: i

      open(newunit=unit, file=trim(dir) + '/' + array_meta_file_v_3, status='old', action='read')
      read(unit, '(a)') self%type_
      read(unit, *) self%kind_
      read(unit, *) self%dim
      ENSURE_DEALLOCATED(self%sizes)
      allocate(self%sizes(self%dim))
      do i = 1, self%dim
         read(unit, *) self%sizes(i)
      end do
      close(unit)
   end subroutine load_array_meta_v_3

   <%- TYPES.each{|t| -%>
      subroutine dump_array<%= t %>(self, dir<%= list(NUM_DESC_MAX, ''){|i| ", desc#{i}"} %>)
         Character(len=*), parameter:: type_ = '<%= t.type %>'
         Integer(kind=int8), parameter:: kind_ = <%= t.kind %>
         Integer(kind=int8), parameter:: dim = <%= t.dim %>

         <%= t.declare %>, intent(in):: self
         Character(len=*), intent(in):: dir
         <%- if NUM_DESC_MAX >= 1 -%>
            Character(len=*), intent(in), optional:: <%= list(NUM_DESC_MAX){|i| "desc#{i}"} %>
         <%- end -%>

         Integer(kind=int64):: sizes(dim)
         Integer(kind=kind(dim)):: i
         Integer(kind=kind(input_unit)):: unit

         ASSERT(sh('mkdir -p ' + trim(dir)))

         ! version
         open(newunit=unit, file=trim(dir) + '/' + array_version_file, status='replace', action='write')
         write(unit, '(g0)') version
         close(unit)

         ! metadata
         open(newunit=unit, file=trim(dir) + '/' + array_meta_file, status='replace', action='write')
         write(unit, '(a)') type_
         write(unit, '(g0)') kind_
         write(unit, '(g0)') dim
         sizes = shape(self)
         do i = 1, dim
            write(unit, '(g0)') sizes(i)
         end do
         close(unit)

         ! data
         open(newunit=unit, file=trim(dir) + '/' + array_data_file, status='replace', action='write', form='unformatted', access='stream')
         write(unit) self
         close(unit)

         ! descriptions
         open(newunit=unit, file=trim(dir) + '/' + array_description_file, status='replace', action='write')
         <%- (1..NUM_DESC_MAX).each{|i| -%>
            if(present(desc<%= i %>)) write(unit, '(a)') desc<%= i %>
         <%- } -%>
         close(unit)
      end subroutine dump_array<%= t %>

      subroutine load_array<%= t %>(self, dir)
         <%= t.declare %>, intent(inout), allocatable:: self
         Character(len=*), intent(in):: dir

         Integer:: version_

         version_ = load_array_version(trim(dir))
         select case(version_)
         case(3)
            call load_array_v_3<%= t %>(self, dir)
         case default
            ERROR('Unsupported version ' + str(version_) + ' for ' + trim(dir))
         end select
      end subroutine load_array<%= t %>

      subroutine load_array_v_3<%= t %>(self, dir)
         Character(len=*), parameter:: type_ = '<%= t.type %>'
         Integer(kind=int8), parameter:: kind_ = <%= t.kind %>
         Integer(kind=int8), parameter:: dim = <%= t.dim %>

         <%= t.declare %>, intent(inout), allocatable:: self
         Character(len=*), intent(in):: dir

         type(ArrayMetaV3):: meta
         Integer(kind=kind(input_unit)):: unit

         call load_array_meta_v_3(meta, trim(dir))

         ASSERT(meta%type_ == type_)
         ASSERT(meta%kind_ == kind_)
         ASSERT(meta%dim == dim)

         ENSURE_DEALLOCATED(self)
         allocate(self(<%= list(t.dim){|i| "1:meta%sizes(#{i})"} %>))

         open(newunit=unit, file=trim(dir) + '/' + array_data_file, status='old', action='read', form='unformatted', access='stream')
         read(unit) self
         close(unit)
      end subroutine load_array_v_3<%= t %>
   <%- } -%>
end module io_lib
