<%
  require 'fort'

  INT_TYPES = ::Fort::Type::Integer.multi_provide(dim: 0)
  TYPES\
  = ::Fort::Type::Logical.multi_provide(dim: 0)\
  + ::Fort::Type::Real.multi_provide(dim: 0)\
  + ::Fort::Type::Complex.multi_provide(dim: 0)\
  + ::Fort::Type::Character.multi_provide\
  + INT_TYPES
%>

#include "fortran_lib.h"
module character_lib
   USE_FORTRAN_LIB_H
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   use, intrinsic:: iso_fortran_env, only: int8, int64

   implicit none

   private

   public:: lower, upper
   public:: replace ! replace all substring `from` in string `s` to `to`
   public:: s                    ! Same as String#strip method in Ruby.
   public:: operator(+)          ! Syntax sugar of `//'. This will be useful if you want to use `//' within macro where `//' is discarded.
   public:: str ! Convert a value to a string.

   interface operator(+)
      module procedure add
   end interface operator(+)

   interface lower
      module procedure lower
   end interface lower

   interface upper
      module procedure upper
   end interface upper

   interface replace
      module procedure replace
   end interface replace

   interface s
      module procedure s
   end interface s

   <%- TYPES.each{|t| -%>
      interface str
         module procedure str<%= t %>
      end interface str
   <%- } -%>

   Integer(kind=int8), parameter, public:: inc_upper_to_lower = iachar('a') - iachar('A')

contains

   <%- [[:upper, :a, :z, :-], [:lower, :A, :Z, :+]].each{|ul, a, z, op| -%>
      elemental function <%= ul %>(s) result(ret)
         Integer(kind=kind(inc_upper_to_lower)), parameter:: i<%= a %> = iachar('<%= a %>')
         Integer(kind=kind(inc_upper_to_lower)), parameter:: i<%= z %> = iachar('<%= z %>')
         Character(len=*), intent(in):: s
         Character(len=len(s), kind=kind(s)):: ret
         Character(len=1, kind=kind(s)):: si
         Integer(kind=int64):: isi
         Integer(kind=int64):: i

         do i = 1, len(s, kind=kind(i))
            si = s(i:i)
            isi = iachar(si)
            if(i<%= a %> <= isi .and. isi <= i<%= z %>)then
               ret(i:i) = achar(isi <%= op %> inc_upper_to_lower)
            else
               ret(i:i) = si
            end if
         end do
      end function <%= ul %>
   <%- } -%>

   pure function replace(s, from, to) result(ret)
      Character(len=*), intent(in):: s, from, to
      Character(len=get_len_of_replaced_str(s, from, to)) ret

      Integer(kind=INT64):: lenS, lenFrom, lenTo, posSeek, posMatch, posRet

      lenS = len(s)
      lenFrom = len(from)
      lenTo = len(to)
      posSeek = 1
      posRet = 1
      do while(posSeek <= lenS)
         posMatch = index(s(posSeek:), from)
         select case(posMatch)
         case(:0)
            ret(posRet:) = s(posSeek:)
            exit
         case(1)
            ret(posRet:posRet + lenTo - 1) = to
            posRet = posRet + lenTo
            posSeek = posSeek + lenFrom
         case(2:)
            ret(posRet:posRet + posMatch - 2) = s(posSeek:posSeek + posMatch - 2)
            ret(posRet + posMatch - 1:posRet + posMatch - 1 + lenTo - 1) = to
            posRet = posRet + posMatch - 1 + lenTo - 1 + 1
            posSeek = posSeek + posMatch - 1 + lenFrom - 1 + 1
         end select
      end do
   end function replace

   pure function get_len_of_replaced_str(s, from, to) result(ret)
      Character(len=*), intent(in):: s, from, to
      Integer(kind=int64):: ret

      Integer(kind=kind(ret)):: lenS, lenFrom, posSeek, posMatch, nMatch

      lenS = len(s)
      lenFrom = len(from)

      nMatch = 0
      posSeek = 1
      do while(posSeek <= lenS)
         posMatch = index(s(posSeek:), from)
         if(posMatch > 0)then
            nMatch = nMatch + 1
            posSeek = posSeek + posMatch + lenFrom - 1
         else
            exit
         end if
      end do

      ret = lenS + nMatch*(len(to) - lenFrom)
   end function get_len_of_replaced_str

   pure function s(str) result(answer)
      character(len=*), intent(in):: str
      character(len=len_trim(adjustl(str))):: answer

      answer = trim(adjustl(str))
   end function s

   function add(str1, str2) result(answer)
      character(len=*), intent(in):: str1, str2
      character(len=len(str1) + len(str2)):: answer

      answer = str1 // str2
   end function add

   <%- TYPES.each{|t| -%>
      pure function str<%= t %>(x) result(ret)
         <%= t.declare %>, intent(in):: x
         character(len=:), allocatable:: buf
         character(len=:), allocatable:: ret
         Integer(kind=int64):: lenBuf
         Integer:: ios

         lenBuf = 64 ! enough length to dump `real128` value
         do
            ENSURE_DEALLOCATED(buf)
            allocate(Character(lenBuf):: buf)
            write(buf, *, iostat=ios) x
            if(is_iostat_ok(ios))then
               exit
            else
               lenBuf = 2*lenBuf
            end if
         end do
         ret = s(buf)
      end function str<%= t %>
   <%- } -%>
end module character_lib
