<%-
  FLOATS = %w[
    delta
    depmin
    depmax
    scale
    odelta
    b
    e
    o
    a
    fmt
    t0
    t1
    t2
    t3
    t4
    t5
    t6
    t7
    t8
    t9
    f
    resp0
    resp1
    resp2
    resp3
    resp4
    resp5
    resp6
    resp7
    resp8
    resp9
    stla
    stlo
    stel
    stdp
    evla
    evlo
    evel
    evdp
    mag
    user0
    user1
    user2
    user3
    user4
    user5
    user6
    user7
    user8
    user9
    dist
    az
    baz
    gcarc
    sb
    sdelta
    depmen
    cmpaz
    cmpinc
    xminimum
    xmaximum
    yminimum
    ymaximum
    fhdr64
    fhdr65
    fhdr66
    fhdr67
    fhdr68
    fhdr69
    fhdr70
  ]
  # not sure `adjtm` or `fhdr64`

  INTEGERS = %w[
    nzyear
    nzjday
    nzhour
    nzmin
    nzsec
    nzmsec
    nvhdr
    norid
    nevid
    npts
    nsnpts
    nwfid
    nxsize
    nysize
    nhdr56
  ]

  ENUMERATED_VALUES = %w[
    iftype
    idep
    iztype
    ihdr4
    iinst
    istreg
    ievreg
    ievtyp
    iqual
    isynth
    imagtyp
    imagsrc
    ihdr13
    ihdr14
    ihdr15
    ihdr16
    ihdr17
    ihdr18
    ihdr19
    ihdr20
  ]

  LOGICALS = %w[
    leven
    lpspol
    lovrok
    lcalda
    lhdr5
  ]

  STRINGS = [
             ['kstnm', 'SHORT'],
             ['kevnm', 'LONG'],
             ['khole', 'SHORT'],
             ['ko', 'SHORT'],
             ['ka', 'SHORT'],
             ['kt0', 'SHORT'],
             ['kt1', 'SHORT'],
             ['kt2', 'SHORT'],
             ['kt3', 'SHORT'],
             ['kt4', 'SHORT'],
             ['kt5', 'SHORT'],
             ['kt6', 'SHORT'],
             ['kt7', 'SHORT'],
             ['kt8', 'SHORT'],
             ['kt9', 'SHORT'],
             ['kf', 'SHORT'],
             ['kuser0', 'SHORT'],
             ['kuser1', 'SHORT'],
             ['kuser2', 'SHORT'],
             ['kcmpnm', 'SHORT'],
             ['knetwk', 'SHORT'],
             ['kdatrd', 'SHORT'],
             ['kinst', 'SHORT'],
            ]

  ALL_METAS = FLOATS + INTEGERS + ENUMERATED_VALUES + LOGICALS + STRINGS

  BODIES = %w[itime ixy iamph irlim ixyz]
-%>

# include "fortran_lib.h"
! LICENSE: GPL Ver. 3
! REFERENCE: http://www.iris.edu/software/sac/manual/file_format.html
! COMPILE: gfortran -ffree-line-length-none -fmax-identifier-length=63 -C -c sac_lib.F90
!
! This module provides
!   - I/O routines for a binary SAC file
!   - user defined types to hold a SAC data
!   - setters and getters for the Sac type
!
! This module provides few consistency check for header variables.
! You should be careful if you change number of data points, time interval, data type, origin time and so on.
module sac_lib
   USE_FORTRAN_LIB_H
   use, intrinsic:: iso_fortran_env, only: &
      INPUT_UNIT, OUTPUT_UNIT, ERROR_UNIT, &
      REAL32, INT32, INT64
   use, non_intrinsic:: character_lib, only: s, operator(+), replace

   implicit none

   private

   public:: load, dump, dump_json
   public:: set_data, get_data
   <%- BODIES.each{|name| -%>
      public:: set_data_<%= name %>, get_data_<%= name %>
   <%- } -%>
   <%- ALL_METAS.each{|name, _| -%>
      public:: set_<%= name %>, is_<%= name %>_defined, get_<%= name %>
   <%- } -%>

   interface load
      module procedure load
   end interface load

   interface dump
      module procedure dump
   end interface dump

   Integer(kind=INT32), parameter, public:: SAC_INTEGER_KIND = INT32
   Integer(kind=INT32), parameter, public:: SAC_REAL_KIND = REAL32
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: LEN_SHORT_STRING = 8
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: LEN_LONG_STRING = 2*LEN_SHORT_STRING
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: LEN_ENUMERATED_VALUE_MAX = 8

   Integer(kind=SAC_INTEGER_KIND), parameter, public:: INTEGER_UNDEFINED = -12345
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: ENUMERATED_VALUE_UNDEFINED = -12345
   Real(kind=SAC_REAL_KIND), parameter, public:: FLOAT_UNDEFINED = -12345
   Character(len=*), parameter, public:: STRING_UNDEFINED = '-12345'
   Character(len=LEN_ENUMERATED_VALUE_MAX), parameter, public:: ENUMERATED_VALUES(1:86) = [ &
      "itime   ", "irlim   ", "iamph   ", "ixy     ", "iunkn   ", "idisp   ", "ivel    ", "iacc    ", &
      "ib      ", "iday    ", "io      ", "ia      ", "it0     ", "it1     ", "it2     ", "it3     ", &
      "it4     ", "it5     ", "it6     ", "it7     ", "it8     ", "it9     ", "iradnv  ", "itannv  ", &
      "iradev  ", "itanev  ", "inorth  ", "ieast   ", "ihorza  ", "idown   ", "iup     ", "illlbb  ", &
      "iwwsn1  ", "iwwsn2  ", "ihglp   ", "isro    ", "inucl   ", "ipren   ", "ipostn  ", "iquake  ", &
      "ipreq   ", "ipostq  ", "ichem   ", "iother  ", "igood   ", "iglch   ", "idrop   ", "ilowsn  ", &
      "irldta  ", "ivolts  ", "ixyz    ", "imb     ", "ims     ", "iml     ", "imw     ", "imd     ", &
      "imx     ", "ineic   ", "ipde    ", "iisc    ", "ireb    ", "iusgs   ", "ibrk    ", "icaltech", &
      "illnl   ", "ievloc  ", "ijsop   ", "iuser   ", "iunknown", "iqb     ", "iqb1    ", "iqb2    ", &
      "iqbx    ", "iqmt    ", "ieq     ", "ieq1    ", "ieq2    ", "ime     ", "iex     ", "inu     ", &
      "inc     ", "io      ", "il      ", "ir      ", "it      ", "iu      "]
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: NVHDR_DEFAULT = 6
   Integer(kind=SAC_INTEGER_KIND), parameter, public:: SAC_TRUE = 1, SAC_FALSE = 0

   type:: Object
   end type Object

   ! npts, nvhdr, b, e, iftype, leven and delta are required variables.
   type, extends(Object), public:: SacMeta
      private

      <%- (FLOATS - %w[b]).each{|name| -%>
         Real(kind=SAC_REAL_KIND):: <%= name %> = FLOAT_UNDEFINED
      <%- } -%>
      Real(kind=SAC_REAL_KIND):: b = 0

      <%- (INTEGERS - %w[nvhdr]).each{|name| -%>
         Integer(kind=SAC_INTEGER_KIND):: <%= name %> = INTEGER_UNDEFINED
      <%- } -%>
      Integer(kind=SAC_INTEGER_KIND):: nvhdr = NVHDR_DEFAULT

      <%- ENUMERATED_VALUES.each{|name| -%>
         Integer(kind=SAC_INTEGER_KIND):: <%= name %> = ENUMERATED_VALUE_UNDEFINED
      <%- } -%>

      <%- LOGICALS.each{|name| -%>
         Integer(kind=SAC_INTEGER_KIND):: <%= name %> = SAC_FALSE
      <%- } -%>

      <%- STRINGS.each{|name, length| -%>
         Character(len=LEN_<%= length %>_STRING):: <%= name %> = STRING_UNDEFINED
      <%- } -%>
   end type SacMeta

   type, extends(Object), public:: SacData
      private

      Real(kind=SAC_REAL_KIND), allocatable:: &
         itime(:), &
         ixy(:, :), &
         iamph(:, :), &
         ixyz(:, :)
      Complex(kind=SAC_REAL_KIND), allocatable:: irlim(:)
   end type SacData

   type, extends(Object), public:: Sac
      ! I left these parameters public so that a head or body of a SAC data can easily be copied to another SAC data.
      type(SacMeta):: meta
      type(SacData):: data
   end type Sac

   interface set_data
      module procedure set_data_itime
      module procedure set_data_irlim
      module procedure set_data_ixy_or_iamph_or_ixyz
   end interface set_data

   interface get_data
      module procedure get_data_itime_
      module procedure get_data_irlim_
      module procedure get_data_ixy_or_iamph_or_ixyz_
   end interface get_data

   <%- (ALL_METAS - LOGICALS).each{|name, _| -%>
      interface get_<%= name %>
         module procedure get_<%= name %>_i_v
         module procedure get_<%= name %>_v_i
         module procedure get_<%= name %>_v
      end interface get_<%= name %>
   <%- } -%>

   <%- LOGICALS.each{|name, _| -%>
      interface get_<%= name %>
         module procedure get_<%= name %>_i_v
         module procedure get_<%= name %>_v
      end interface get_<%= name %>
   <%- } -%>


contains

   subroutine load(self, fileName)
      type(Sac), intent(out):: self
      Character(len=*), intent(in):: fileName

      Integer(kind=SAC_INTEGER_KIND):: npts, nxsize, nysize
      Integer(kind=INT32):: io
      Real(kind=SAC_REAL_KIND), allocatable:: &
         xs(:), ys(:), &
         amplitudes(:), thetas(:), &
         reals(:), imaginaries(:)

      open(newunit = io, file = trim(fileName), status = 'old', action = 'read', form = 'unformatted', access = 'stream')

      <%- ALL_METAS.each{|name, _| -%>
         read(io) self%meta%<%= name %>
      <%- } -%>

      ASSERT(is_iftype_defined(self))
      select case(get_iftype(self))
      case('itime')
         ASSERT(get_npts(self, npts))

         allocate(self%data%itime(1:npts))

         read(io) self%data%itime
      case('ixy')
         ASSERT(get_npts(self, npts))

         allocate(self%data%ixy(1:npts, 2))
         allocate(xs(1:npts))
         allocate(ys(1:npts))

         read(io) ys, xs

         self%data%ixy(:, 1) = xs
         self%data%ixy(:, 2) = ys
      case('iamph')
         ASSERT(get_npts(self, npts))

         allocate(self%data%iamph(1:npts, 2))
         allocate(amplitudes(1:npts))
         allocate(thetas(1:npts))

         read(io) amplitudes, thetas

         self%data%iamph(:, 1) = amplitudes
         self%data%iamph(:, 2) = thetas
      case('irlim')
         ASSERT(get_npts(self, npts))

         allocate(self%data%irlim(1:npts))
         allocate(reals(1:npts))
         allocate(imaginaries(1:npts))

         read(io) reals, imaginaries

         self%data%irlim = cmplx(reals, imaginaries)
      case('ixyz')
         ASSERT(get_nxsize(self, nxsize))
         ASSERT(get_nysize(self, nysize))

         allocate(self%data%ixyz(1:nxsize, 1:nysize))

         read(io) self%data%ixyz
      case default
         ERROR('Unknown iftype: ' + s(get_iftype(self)))
      end select

      close(io)
   end subroutine load

   subroutine dump(self, fileName)
      type(Sac), intent(inout):: self
      Character(len=*), intent(in):: fileName

      Integer(kind=INT32):: io
      Real(kind=SAC_REAL_KIND), allocatable:: ixy(:, :)
      Complex(kind=SAC_REAL_KIND), allocatable:: irlim(:)

      open(newunit = io, file = trim(fileName), status = 'replace', action = 'write', form = 'unformatted', access = 'stream')

      <%- ALL_METAS.each{|name, _| -%>
         write(io) self%meta%<%= name %>
      <%- } -%>

      ASSERT(is_iftype_defined(self))
      select case(get_iftype(self))
      case('itime')
         write(io) get_data_itime(self)
      case('ixy')
         ixy = get_data_ixy(self)

         write(io) ixy(:, 2), ixy(:, 1)
      case('iamph')
         write(io) get_data_iamph(self)
      case('irlim')
         irlim = get_data_irlim(self)

         write(io) real(irlim), aimag(irlim)
      case('ixyz')
         write(io) get_data_ixyz(self)
      case default
         ERROR('Unknown iftype: ' + s(get_iftype(self)))
      end select

      close(io)
   end subroutine dump

   subroutine dump_json(self, io)
      type(Sac), intent(in):: self
      Integer, intent(in):: io

      Integer(kind=INT64):: iData, nData, iX, uX, lY, iY, uY
      Real(kind=SAC_REAL_KIND), allocatable:: itime(:), ixy(:, :), iamph(:, :), ixyz(:, :)
      Complex(kind=SAC_REAL_KIND), allocatable:: irlim(:)

      write(io, '(a)') '{"meta": {'
      <%- (FLOATS + INTEGERS).each{|name, _| -%>
         if(is_<%= name %>_defined(self))then
            write(io, *, delim='none') '"<%= name %>": ', get_<%= name %>(self), ','
         else
            write(io, *, delim='none') '"<%= name %>": null,'
         end if
      <%- } -%>
      <%- ENUMERATED_VALUES.each{|name, _| -%>
         if(is_<%= name %>_defined(self))then
            write(io, *, delim='none') '"<%= name %>": ', '"' + trim(get_<%= name %>(self)) + '"', ','
         else
            write(io, *, delim='none') '"<%= name %>": null,'
         end if
      <%- } -%>
      <%- LOGICALS.each{|name, _| -%>
         if(is_<%= name %>_defined(self))then
            if(get_<%= name %>(self))then
               write(io, *, delim='none') '"<%= name %>": true,'
            else
               write(io, *, delim='none') '"<%= name %>": false,'
            end if
         else
            write(io, *, delim='none') '"<%= name %>": null,'
         end if
      <%- } -%>
      <%- (last_name, _), *strings = STRINGS -%>
      <%- strings.each{|name, _| -%>
         if(is_<%= name %>_defined(self))then
            write(io, *, delim='none') '"<%= name %>": ', '"' + replace(trim(get_<%= name %>(self)), '"', '\"') + '"', ','
         else
            write(io, *, delim='none') '"<%= name %>": null,'
         end if
      <%- } -%>
      if(is_<%= last_name %>_defined(self))then
         write(io, *, delim='none') '"<%= last_name %>": ', '"' + replace(trim(get_<%= last_name %>(self)), '"', '\"') + '"'
      else
         write(io, *, delim='none') '"<%= last_name %>": null'
      end if
      write(io, '(a)') '         },'
      write(io, '(a)') '"data": ['

      ASSERT(is_iftype_defined(self))
      select case(get_iftype(self))
      case('itime')
         itime = get_data_itime(self)
         nData = ubound(itime, dim=1, kind=kind(iData))
         do iData = lbound(itime, dim=1, kind=kind(iData)), nData - 1
            write(io, *, delim='none') itime(iData), ','
         end do
         write(io, *, delim='none') itime(nData)
      case('ixy')
         ixy = get_data_ixy(self)
         nData = ubound(ixy, dim=1, kind=kind(iData))
         do iData = lbound(ixy, dim=1, kind=kind(iData)), nData - 1
            write(io, *, delim='none') '[', ixy(iData, 1), ', ', ixy(iData, 2), '],'
         end do
         write(io, *, delim='none') '[', ixy(nData, 1), ', ', ixy(nData, 2), ']'
      case('iamph')
         iamph = get_data_iamph(self)
         nData = ubound(iamph, dim=1, kind=kind(iData))
         do iData = lbound(iamph, dim=1, kind=kind(iData)), nData - 1
            write(io, *, delim='none') '[', iamph(iData, 1), ', ', iamph(iData, 2), '],'
         end do
         write(io, *, delim='none') '[', iamph(nData, 1), ', ', iamph(nData, 2), ']'
      case('irlim')
         irlim = get_data_irlim(self)
         nData = ubound(irlim, dim=1, kind=kind(iData))
         do iData = lbound(irlim, dim=1, kind=kind(iData)), nData - 1
            write(io, *, delim='none') '[', real(irlim(iData)), ', ', imag(irlim(iData)), '],'
         end do
         write(io, *, delim='none') '[', real(irlim(iData)), ', ', imag(irlim(iData)), ']'
      case('ixyz')
         ixyz = get_data_ixyz(self)
         uX = ubound(ixyz, 1, kind=kind(iX))
         lY = lbound(ixyz, 2, kind=kind(iY))
         uY = ubound(ixyz, 2, kind=kind(iY))
         do iX = lbound(ixyz, 1, kind=kind(iX)), uX - 1
            write(io, *, delim='none') '['
            do iY = lY, uY - 1
               write(io, *, delim='none') ixyz(iX, iY), ','
            end do
            write(io, *, delim='none') ixyz(iX, uY)
            write(io, *, delim='none') '],'
         end do
         write(io, *, delim='none') '['
         do iY = lY, uY - 1
            write(io, *, delim='none') ixyz(uX, iY), ','
         end do
         write(io, *, delim='none') ixyz(uX, uY)
         write(io, *, delim='none') ']'
      case default
         ERROR('Unknown iftype: ' + s(get_iftype(self)))
      end select

      write(io, '(a)') '         ]'
      write(io, '(a)') '}'
   end subroutine dump_json

   subroutine set_data_itime(self, value)
      type(Sac), intent(inout):: self
      Real(kind=SAC_REAL_KIND), intent(in):: value(:)

      Real(kind=SAC_REAL_KIND):: b, delta
      Integer(kind=SAC_INTEGER_KIND):: npts

      npts = size(value, 1)
      ASSERT(get_b(self, b))
      ASSERT(get_delta(self, delta))

      call set_iftype(self, 'itime')
      call set_leven(self, .true.)
      call set_npts(self, npts)
      call set_e(self, b + (npts - 1)*delta)
      call set_depmin(self, minval(value))
      call set_depmax(self, maxval(value))
      call set_depmen(self, sum(value)/npts)
      self%data%itime = value

      ENSURE_DEALLOCATED(self%data%ixy)
      ENSURE_DEALLOCATED(self%data%iamph)
      ENSURE_DEALLOCATED(self%data%irlim)
      ENSURE_DEALLOCATED(self%data%ixyz)
   end subroutine set_data_itime

   function get_data_itime(self) result(value)
      type(Sac), intent(in):: self

      Real(kind=SAC_REAL_KIND), allocatable:: value(:)

      ASSERT(is_iftype_defined(self))
      ASSERT(get_iftype(self) == 'itime')
      ASSERT(allocated(self%data%itime))
      value = self%data%itime
      ASSERT(size(value, 1) == get_npts(self))
   end function get_data_itime

   subroutine get_data_itime_(self, value)
      type(Sac), intent(in):: self
      Real(kind=SAC_REAL_KIND), allocatable, intent(out):: value(:)

      value = get_data_itime(self)
   end subroutine get_data_itime_

   <%- %w[ixy iamph].each{|t| -%>
      subroutine set_data_<%= t %>(self, value)
         type(Sac), intent(inout):: self
         Real(kind=SAC_REAL_KIND):: value(:, :)

         Integer(kind=SAC_INTEGER_KIND):: npts

         ASSERT(size(value, 2) == 2) ! [[x1, y1], [x2, y2], ...]
         npts = size(value, 1)

         call set_iftype(self, '<%= t %>')
         call set_leven(self, .false.)
         call set_npts(self, npts)
         call set_b(self, value(1, 1))
         call set_e(self, value(npts, 1))
         call set_depmin(self, minval(value(:, 2)))
         call set_depmax(self, maxval(value(:, 2)))
         call set_depmen(self, sum(value(:, 2))/npts)
         self%data%<%= t %> = value

         ENSURE_DEALLOCATED(self%data%itime)
         <%- another = {'ixy' => 'iamph', 'iamph' => 'ixy'} -%>
         ENSURE_DEALLOCATED(self%data%<%= another[t] %>)
         ENSURE_DEALLOCATED(self%data%irlim)
         ENSURE_DEALLOCATED(self%data%ixyz)
      end subroutine set_data_<%= t %>

      function get_data_<%= t %>(self) result(value)
         type(Sac), intent(in):: self

         Real(kind=SAC_REAL_KIND), allocatable:: value(:, :)

         ASSERT(get_iftype(self) == '<%= t %>')
         ASSERT(allocated(self%data%<%= t %>))
         value = self%data%<%= t %>
         ASSERT(size(value, 1) == get_npts(self))
      end function get_data_<%= t %>
   <%- } -%>

   subroutine set_data_irlim(self, value)
      type(Sac), intent(inout):: self
      Complex(kind=SAC_REAL_KIND), intent(in):: value(:)

      call set_iftype(self, 'irlim')
      call set_leven(self, .false.)
      call set_npts(self, size(value, 1))
      self%data%irlim = value

      ENSURE_DEALLOCATED(self%data%itime)
      ENSURE_DEALLOCATED(self%data%ixy)
      ENSURE_DEALLOCATED(self%data%iamph)
      ENSURE_DEALLOCATED(self%data%ixyz)
   end subroutine set_data_irlim

   function get_data_irlim(self) result(value)
      type(Sac), intent(in):: self

      Complex(kind=SAC_REAL_KIND), allocatable:: value(:)

      ASSERT(get_iftype(self) == 'irlim')
      ASSERT(allocated(self%data%irlim))
      value = self%data%irlim
      ASSERT(size(value, 1) == get_npts(self))
   end function get_data_irlim

   subroutine get_data_irlim_(self, value)
      type(Sac), intent(in):: self
      Complex(kind=SAC_REAL_KIND), allocatable, intent(out):: value(:)

      value = get_data_itime(self)
   end subroutine get_data_irlim_

   subroutine set_data_ixyz(self, value)
      type(Sac), intent(inout):: self
      Real(kind=SAC_REAL_KIND), intent(in):: value(:, :)

      call set_iftype(self, 'ixyz')
      call set_leven(self, .true.)
      call set_nxsize(self, size(value, 1))
      call set_nysize(self, size(value, 2))
      self%data%ixyz = value

      ENSURE_DEALLOCATED(self%data%itime)
      ENSURE_DEALLOCATED(self%data%ixy)
      ENSURE_DEALLOCATED(self%data%iamph)
      ENSURE_DEALLOCATED(self%data%irlim)
   end subroutine set_data_ixyz

   function get_data_ixyz(self) result(value)
      type(Sac), intent(in):: self

      Real(kind=SAC_REAL_KIND), allocatable:: value(:, :)

      ASSERT(get_iftype(self) == 'ixyz')
      ASSERT(allocated(self%data%ixyz))
      value = self%data%ixyz
      ASSERT(size(value, 1) == get_nxsize(self))
      ASSERT(size(value, 2) == get_nysize(self))
   end function get_data_ixyz

   subroutine set_data_ixy_or_iamph_or_ixyz(self, value)
      type(Sac), intent(inout):: self
      Real(kind=SAC_REAL_KIND):: value(:, :)

      ASSERT(is_iftype_defined(self))
      select case(get_iftype(self))
      <%- %w[ixy iamph ixyz].each{|t| -%>
         case('<%= t %>')
            call set_data_<%= t %>(self, value)
      <%- } -%>
      case default
         ERROR('Unknown iftype: ' + s(get_iftype(self)))
      end select
   end subroutine set_data_ixy_or_iamph_or_ixyz

   subroutine get_data_ixy_or_iamph_or_ixyz_(self, value)
      type(Sac), intent(in):: self
      Real(kind=SAC_REAL_KIND), allocatable, intent(out):: value(:, :)

      ASSERT(is_iftype_defined(self))
      select case(get_iftype(self))
      <%- %w[ixy iamph ixyz].each{|t| -%>
         case('<%= t %>')
            value = get_data_<%= t %>(self)
      <%- } -%>
      case default
         ERROR('Unknown iftype: ' + s(get_iftype(self)))
      end select
   end subroutine get_data_ixy_or_iamph_or_ixyz_

   <%- FLOATS.each{|name| -%>
      function get_<%= name %>_i_v(self, value) result(isDefined)
         type(Sac), intent(in):: self
         Real(kind=SAC_REAL_KIND), intent(out):: value
         Logical:: isDefined

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_i_v

      function get_<%= name %>_v_i(self, isDefined) result(value)
         type(Sac), intent(in):: self
         Logical, intent(out):: isDefined
         Real(kind=SAC_REAL_KIND):: value

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_v_i

      function get_<%= name %>_v(self) result(value)
         type(Sac), intent(in):: self
         Real(kind=SAC_REAL_KIND):: value

         value = self%meta%<%= name %>
      end function get_<%= name %>_v

      function is_<%= name %>_defined(self) result(ret)
         type(Sac), intent(in):: self
         Logical:: ret

         ret = (self%meta%<%= name %> /= FLOAT_UNDEFINED)
      end function is_<%= name %>_defined

      subroutine set_<%= name %>(self, value)
         type(Sac), intent(inout):: self
         Real(kind=SAC_REAL_KIND), intent(in):: value

         self%meta%<%= name %> = value
      end subroutine set_<%= name %>
   <%- } -%>

   <%- INTEGERS.each{|name| -%>
      function get_<%= name %>_i_v(self, value) result(isDefined)
         type(Sac), intent(in):: self
         Integer(kind=SAC_INTEGER_KIND), intent(out):: value
         Logical:: isDefined

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_i_v

      function get_<%= name %>_v_i(self, isDefined) result(value)
         type(Sac), intent(in):: self
         Logical, intent(out):: isDefined
         Integer(kind=SAC_INTEGER_KIND):: value

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_v_i

      function get_<%= name %>_v(self) result(value)
         type(Sac), intent(in):: self
         Integer(kind=SAC_INTEGER_KIND):: value

         value = self%meta%<%= name %>
      end function get_<%= name %>_v

      function is_<%= name %>_defined(self) result(ret)
         type(Sac), intent(in):: self
         Logical:: ret

         ret = (self%meta%<%= name %> /= INTEGER_UNDEFINED)
      end function is_<%= name %>_defined

      subroutine set_<%= name %>(self, value)
         type(Sac), intent(inout):: self
         Integer(kind=SAC_INTEGER_KIND), intent(in):: value

         self%meta%<%= name %> = value
      end subroutine set_<%= name %>
   <%- } -%>

   <%- ENUMERATED_VALUES.each{|name| -%>
      function get_<%= name %>_v_i(self, isDefined) result(value)
         type(Sac), intent(in):: self
         Logical, intent(out):: isDefined
         Character(len=LEN_ENUMERATED_VALUE_MAX):: value

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_v_i

      function get_<%= name %>_i_v(self, value) result(isDefined)
         type(Sac), intent(in):: self
         Character(len=LEN_ENUMERATED_VALUE_MAX), intent(out):: value
         Logical:: isDefined

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_i_v

      function get_<%= name %>_v(self) result(value)
         type(Sac), intent(in):: self
         Character(len=LEN_ENUMERATED_VALUE_MAX):: value

         Integer:: internalValue

         internalValue = self%meta%<%= name %>
         ASSERT(check_bound(internalValue, ENUMERATED_VALUES, 1))
         value = ENUMERATED_VALUES(internalValue)
      end function get_<%= name %>_v

      function is_<%= name %>_defined(self) result(ret)
         type(Sac), intent(in):: self
         Logical:: ret

         ! 2nd condition is enough since ENUMERATED_VALUE_UNDEFINED is -12345.
         ret = &
            (self%meta%<%= name %> /= ENUMERATED_VALUE_UNDEFINED) &
            .and. check_bound(self%meta%<%= name %>, ENUMERATED_VALUES, 1)
      end function is_<%= name %>_defined

      subroutine set_<%= name %>(self, value)
         type(Sac), intent(inout):: self
         Character(len=*), intent(in):: value

         Integer:: internalValue

         do ALL_OF(internalValue, ENUMERATED_VALUES, 1)
            if(value == ENUMERATED_VALUES(internalValue))then
               self%meta%<%= name %> = internalValue
               return
            end if
         end do

         ERROR('Unknown <%= name %>: ' + s(value))
      end subroutine set_<%= name %>
   <%- } -%>

   <%- LOGICALS.each{|name| -%>
      function get_<%= name %>_i_v(self, value) result(isDefined)
         type(Sac), intent(in):: self
         Logical, intent(out):: value
         Logical:: isDefined

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_i_v

      function get_<%= name %>_v(self) result(value)
         type(Sac), intent(in):: self
         Logical:: value

         Integer:: internalValue

         internalValue = self%meta%<%= name %>
         value = (internalValue == 1)
      end function get_<%= name %>_v

      function is_<%= name %>_defined(self) result(ret)
         type(Sac), intent(in):: self
         Logical:: ret

         ret = ((self%meta%<%= name %> == 1) .or. (self%meta%<%= name %> == 0))
      end function is_<%= name %>_defined

      subroutine set_<%= name %>(self, value)
         type(Sac), intent(inout):: self
         Logical, intent(in):: value

         if(value)then
            self%meta%<%= name %> = 1
         else
            self%meta%<%= name %> = 0
         end if
      end subroutine set_<%= name %>
   <%- } -%>

   <%- STRINGS.each{|name, length| -%>
      function get_<%= name %>_i_v(self, value) result(isDefined)
         type(Sac), intent(in):: self
         Character(len=LEN_<%= length %>_STRING), intent(out):: value
         Logical:: isDefined

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_i_v

      function get_<%= name %>_v_i(self, isDefined) result(value)
         type(Sac), intent(in):: self
         Logical, intent(out):: isDefined
         Character(len=LEN_<%= length %>_STRING):: value

         value = get_<%= name %>(self)
         isDefined = is_<%= name %>_defined(self)
      end function get_<%= name %>_v_i

      function get_<%= name %>_v(self) result(value)
         type(Sac), intent(in):: self
         Character(len=LEN_<%= length %>_STRING):: value

         value = self%meta%<%= name %>
      end function get_<%= name %>_v

      function is_<%= name %>_defined(self) result(ret)
         type(Sac), intent(in):: self
         Logical:: ret

         ret = (self%meta%<%= name %> /= STRING_UNDEFINED)
      end function is_<%= name %>_defined

      subroutine set_<%= name %>(self, value)
         type(Sac), intent(inout):: self
         Character(len=*), intent(in):: value

         ASSERT(len_trim(value) <= LEN_<%= length %>_STRING)
         self%meta%<%= name %> = value
      end subroutine set_<%= name %>
   <%- } -%>
end module sac_lib
