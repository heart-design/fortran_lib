<%-
  require 'fort'

  INTEGERS = ::Fort::Type::Integer.multi_provide(dim: 0)
  REALS = ::Fort::Type::Real.multi_provide(dim: 0)
  TYPES = INTEGERS + REALS
-%>

#include "fortran_lib.h"
module sort_lib
   <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
   USE_FORTRAN_LIB_H
   use, non_intrinsic:: comparable_lib, only: is_nan, is_infinity

   use, non_intrinsic:: stack_lib, only: push, pop
   use, non_intrinsic:: stack_lib, only: IntegerDim0KindINT64Stack

   implicit none

   private

   public:: quick_sort, quick_sorting
   public:: merge_sort, merge_sorting

   <%- TYPES.each{|t| -%>
      interface quick_sort
         module procedure quick_sort<%= t %>
      end interface quick_sort

      interface quick_sorting
         module procedure quick_sorting<%= t %>
      end interface quick_sorting

      interface get_pivot
         module procedure get_pivot<%= t %>
      end interface get_pivot

      interface merge_sort
         module procedure merge_sort<%= t %>
      end interface merge_sort

      interface merge_sorting
         module procedure merge_sorting<%= t %>
      end interface merge_sorting

      interface merge_sorting_substance
         module procedure merge_sorting_substance<%= t %>
      end interface merge_sorting_substance

      interface merge_sorted_lists
         module procedure merge_sorted_lists<%= t %>
      end interface merge_sorted_lists

      interface sorting_3
         module procedure sorting_3<%= t %>
      end interface sorting_3

      interface sorting_2
         module procedure sorting_2<%= t %>
      end interface sorting_2

      interface swapping
         module procedure swapping<%= t %>
      end interface swapping
   <%- } -%>

contains

   <%- TYPES.each{|t| -%>
      function quick_sort<%= t %>(xs) result(xsSorted)
         <%= t.declare %>, allocatable:: xsSorted(:)
         <%= t.declare %>, intent(in):: xs(:)

         xsSorted = xs
         call quick_sorting(xsSorted)
      end function quick_sort<%= t %>

      subroutine quick_sorting<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>:: pivot
         type(IntegerDim0KindINT64Stack):: iLs, iRs
         Integer(kind = INT64):: iL, iR, iLOriginal, iROriginal
         Logical:: isUniform

         ASSERT(.not.any(is_nan(xs)))

         call push(iLs, 1_INT64)
         call push(iRs, size(xs, dim = 1, kind = kind(iR)))

         do while(pop(iRs, iR))    ! Loop for all segments on the stacks.
            ASSERT(pop(iLs, iL))

            iLOriginal = iL      ! Left most index of the current segment.
            do while(iLOriginal < iR) ! While current segment remains
               select case(iR - iL)
               case(-1, 0)
                  exit
               case(1)
                  call sorting_2(xs(iL:iR))
                  exit
               case(2)
                  call sorting_3(xs(iL:iR))
                  exit
               case(3:)
                  pivot = get_pivot(xs(iL:iR), isUniform)
                  if(isUniform) exit

                  iROriginal = iR  ! Right most index of the current segment
                  loop_to_swap: do ! Within the segment
                     do while(xs(iR) > pivot)
                        iR = iR - 1
                     end do
                     do while(xs(iL) <= pivot)
                        if(iL >= iR)then
                           call push(iLs, iR + 1)
                           call push(iRs, iROriginal)
                           iL = iLOriginal
                           exit loop_to_swap
                        end if

                        iL = iL + 1
                     end do

                     call swapping(xs(iL), xs(iR))
                  end do loop_to_swap
               case default
                  RAISE('Must not happen.')
               end select
            end do
         end do
      end subroutine quick_sorting<%= t %>

      function get_pivot<%= t %>(xs, isUniform) result(pivot)
         <%= t.declare %>:: pivot
         <%= t.declare %>, intent(in):: xs(:)
         Logical, intent(out):: isUniform
         <%= t.declare %>:: tmpX
         Integer(kind = INT64):: iXs, nXs

         isUniform = .false.

         nXs = size(xs, dim = 1, kind = kind(nXs))

         if(xs(1) /= xs(nXs))then
            pivot = min(xs(1), xs(nXs))
            return
         end if

         tmpX = xs(1)
         do iXs = 2, nXs - 1
            if(xs(iXs) /= tmpX)then
               pivot = min(xs(iXs), tmpX)
               return
            end if
         end do

         pivot = huge(pivot)
         isUniform = .true.
      end function get_pivot<%= t %>

      function merge_sort<%= t %>(xs) result(xsSorted)
         <%= t.declare %>, intent(in):: xs(:)
         <%= t.declare %>, allocatable:: xsSorted(:)

         xsSorted = xs
         call merge_sorting<%= t %>(xsSorted)
      end function merge_sort<%= t %>

      subroutine merge_sorting<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)

         ASSERT(.not.any(is_nan(xs)))
         call merge_sorting_substance<%= t %>(xs)
      end subroutine merge_sorting<%= t %>

      recursive subroutine merge_sorting_substance<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(:)
         <%= t.declare %>, allocatable:: xsL(:), xsR(:)
         Integer(kind = INT64):: nXs

         nXs = size(xs, dim = 1, kind = kind(nXs))
         select case(nXs)
         case(:1)
            ! Nothing to do.
         case(2)
            call sorting_2(xs)
         case(3)
            call sorting_3(xs)
         case default
            xsL = xs(1:nXs/2)
            xsR = xs((nXs/2 + 1):nXs)
            call merge_sorting_substance(xsL)
            call merge_sorting_substance(xsR)
            call merge_sorted_lists(xsL, xsR, xs)
         end select
      end subroutine merge_sorting_substance<%= t %>

      ! Merge sorted 1-D array xs and ys into zs.
      subroutine merge_sorted_lists<%= t %>(xs, ys, zs)
         <%= t.declare %>, intent(in):: xs(:), ys(:)
         <%= t.declare %>, intent(out):: zs(:)
         Integer(kind = INT64):: iXs, nXs, iYs, nYs, iZs, nZs

         nXs = size(xs, dim = 1, kind = kind(nXs))
         nYs = size(ys, dim = 1, kind = kind(nYs))
         nZs = size(zs, dim = 1, kind = kind(nZs))

         ASSERT(nXs + nYs == nZs)
         if(nXs < 1)then
             zs = ys
             return
         end if
         if(nYs < 1)then
             zs = xs
             return
         end if

         iXs = 1
         iYs = 1
         iZs = 1
         do while(iXs <= nXs .and. iYs <= nYs)
            if(xs(iXs) <= ys(iYs))then
               zs(iZs) = xs(iXs)
               iXs = iXs + 1
            else
               zs(iZs) = ys(iYs)
               iYs = iYs + 1
            end if
            iZs = iZs + 1
         end do

         if(iXs <= nXs)then
            zs(iZs:nZs) = xs(iXs:nXs)
         else
            zs(iZs:nZs) = ys(iYs:nYs)
         end if
      end subroutine merge_sorted_lists<%= t %>

      pure subroutine sorting_3<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(1:3)

         if(xs(3) < xs(1)) call swapping(xs(1), xs(3))
         if(xs(3) < xs(2))then
            call swapping(xs(2), xs(3))
         else if(xs(2) < xs(1))then
            call swapping(xs(1), xs(2))
         end if
      end subroutine sorting_3<%= t %>

      pure subroutine sorting_2<%= t %>(xs)
         <%= t.declare %>, intent(inout):: xs(1:2)

         if(xs(2) < xs(1)) call swapping(xs(1), xs(2))
      end subroutine sorting_2<%= t %>

      elemental subroutine swapping<%= t %>(a, b)
         <%= t.declare %>, intent(inout):: a, b
         <%= t.declare %>:: swap

         swap = b
         b = a
         a = swap
      end subroutine swapping<%= t %>
   <%- } -%>
end module sort_lib
